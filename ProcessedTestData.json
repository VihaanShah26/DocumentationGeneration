{"code_tokens": ["def", "sina_xml_to_url_list", "(", "xml_data", ")", ":", "rawurl", "=", "[", "]", "dom", "=", "parseString", "(", "xml_data", ")", "for", "node", "in", "dom", ".", "getElementsByTagName", "(", "'durl'", ")", ":", "url", "=", "node", ".", "getElementsByTagName", "(", "'url'", ")", "[", "0", "]", "rawurl", ".", "append", "(", "url", ".", "childNodes", "[", "0", "]", ".", "data", ")", "return", "rawurl"], "docstring_tokens": ["str", "-", ">", "list", "Convert", "XML", "to", "URL", "List", ".", "From", "Biligrab", "."]}
{"code_tokens": ["def", "dailymotion_download", "(", "url", ",", "output_dir", "=", "'.'", ",", "merge", "=", "True", ",", "info_only", "=", "False", ",", "*", "*", "kwargs", ")", ":", "html", "=", "get_content", "(", "rebuilt_url", "(", "url", ")", ")", "info", "=", "json", ".", "loads", "(", "match1", "(", "html", ",", "r'qualities\":({.+?}),\"'", ")", ")", "title", "=", "match1", "(", "html", ",", "r'\"video_title\"\\s*:\\s*\"([^\"]+)\"'", ")", "or", "match1", "(", "html", ",", "r'\"title\"\\s*:\\s*\"([^\"]+)\"'", ")", "title", "=", "unicodize", "(", "title", ")", "for", "quality", "in", "[", "'1080'", ",", "'720'", ",", "'480'", ",", "'380'", ",", "'240'", ",", "'144'", ",", "'auto'", "]", ":", "try", ":", "real_url", "=", "info", "[", "quality", "]", "[", "1", "]", "[", "\"url\"", "]", "if", "real_url", ":", "break", "except", "KeyError", ":", "pass", "mime", ",", "ext", ",", "size", "=", "url_info", "(", "real_url", ")", "print_info", "(", "site_info", ",", "title", ",", "mime", ",", "size", ")", "if", "not", "info_only", ":", "download_urls", "(", "[", "real_url", "]", ",", "title", ",", "ext", ",", "size", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ")"], "docstring_tokens": ["Downloads", "Dailymotion", "videos", "by", "URL", "."]}
{"code_tokens": ["def", "sina_download", "(", "url", ",", "output_dir", "=", "'.'", ",", "merge", "=", "True", ",", "info_only", "=", "False", ",", "*", "*", "kwargs", ")", ":", "if", "'news.sina.com.cn/zxt'", "in", "url", ":", "sina_zxt", "(", "url", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ",", "*", "*", "kwargs", ")", "return", "vid", "=", "match1", "(", "url", ",", "r'vid=(\\d+)'", ")", "if", "vid", "is", "None", ":", "video_page", "=", "get_content", "(", "url", ")", "vid", "=", "hd_vid", "=", "match1", "(", "video_page", ",", "r'hd_vid\\s*:\\s*\\'([^\\']+)\\''", ")", "if", "hd_vid", "==", "'0'", ":", "vids", "=", "match1", "(", "video_page", ",", "r'[^\\w]vid\\s*:\\s*\\'([^\\']+)\\''", ")", ".", "split", "(", "'|'", ")", "vid", "=", "vids", "[", "-", "1", "]", "if", "vid", "is", "None", ":", "vid", "=", "match1", "(", "video_page", ",", "r'vid:\"?(\\d+)\"?'", ")", "if", "vid", ":", "#title = match1(video_page, r'title\\s*:\\s*\\'([^\\']+)\\'')", "sina_download_by_vid", "(", "vid", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ")", "else", ":", "vkey", "=", "match1", "(", "video_page", ",", "r'vkey\\s*:\\s*\"([^\"]+)\"'", ")", "if", "vkey", "is", "None", ":", "vid", "=", "match1", "(", "url", ",", "r'#(\\d+)'", ")", "sina_download_by_vid", "(", "vid", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ")", "return", "title", "=", "match1", "(", "video_page", ",", "r'title\\s*:\\s*\"([^\"]+)\"'", ")", "sina_download_by_vkey", "(", "vkey", ",", "title", "=", "title", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ")"], "docstring_tokens": ["Downloads", "Sina", "videos", "by", "URL", "."]}
{"code_tokens": ["def", "sprint", "(", "text", ",", "*", "colors", ")", ":", "return", "\"\\33[{}m{content}\\33[{}m\"", ".", "format", "(", "\";\"", ".", "join", "(", "[", "str", "(", "color", ")", "for", "color", "in", "colors", "]", ")", ",", "RESET", ",", "content", "=", "text", ")", "if", "IS_ANSI_TERMINAL", "and", "colors", "else", "text"], "docstring_tokens": ["Format", "text", "with", "color", "or", "other", "effects", "into", "ANSI", "escaped", "string", "."]}
{"code_tokens": ["def", "print_log", "(", "text", ",", "*", "colors", ")", ":", "sys", ".", "stderr", ".", "write", "(", "sprint", "(", "\"{}: {}\"", ".", "format", "(", "script_name", ",", "text", ")", ",", "*", "colors", ")", "+", "\"\\n\"", ")"], "docstring_tokens": ["Print", "a", "log", "message", "to", "standard", "error", "."]}
{"code_tokens": ["def", "e", "(", "message", ",", "exit_code", "=", "None", ")", ":", "print_log", "(", "message", ",", "YELLOW", ",", "BOLD", ")", "if", "exit_code", "is", "not", "None", ":", "sys", ".", "exit", "(", "exit_code", ")"], "docstring_tokens": ["Print", "an", "error", "log", "message", "."]}
{"code_tokens": ["def", "wtf", "(", "message", ",", "exit_code", "=", "1", ")", ":", "print_log", "(", "message", ",", "RED", ",", "BOLD", ")", "if", "exit_code", "is", "not", "None", ":", "sys", ".", "exit", "(", "exit_code", ")"], "docstring_tokens": ["What", "a", "Terrible", "Failure!"]}
{"code_tokens": ["def", "detect_os", "(", ")", ":", "# Inspired by:", "# https://github.com/scivision/pybashutils/blob/78b7f2b339cb03b1c37df94015098bbe462f8526/pybashutils/windows_linux_detect.py", "syst", "=", "system", "(", ")", ".", "lower", "(", ")", "os", "=", "'unknown'", "if", "'cygwin'", "in", "syst", ":", "os", "=", "'cygwin'", "elif", "'darwin'", "in", "syst", ":", "os", "=", "'mac'", "elif", "'linux'", "in", "syst", ":", "os", "=", "'linux'", "# detect WSL https://github.com/Microsoft/BashOnWindows/issues/423", "try", ":", "with", "open", "(", "'/proc/version'", ",", "'r'", ")", "as", "f", ":", "if", "'microsoft'", "in", "f", ".", "read", "(", ")", ".", "lower", "(", ")", ":", "os", "=", "'wsl'", "except", ":", "pass", "elif", "'windows'", "in", "syst", ":", "os", "=", "'windows'", "elif", "'bsd'", "in", "syst", ":", "os", "=", "'bsd'", "return", "os"], "docstring_tokens": ["Detect", "operating", "system", "."]}
{"code_tokens": ["def", "vimeo_download_by_channel", "(", "url", ",", "output_dir", "=", "'.'", ",", "merge", "=", "False", ",", "info_only", "=", "False", ",", "*", "*", "kwargs", ")", ":", "# https://vimeo.com/channels/464686", "channel_id", "=", "match1", "(", "url", ",", "r'http://vimeo.com/channels/(\\w+)'", ")", "vimeo_download_by_channel_id", "(", "channel_id", ",", "output_dir", ",", "merge", ",", "info_only", ",", "*", "*", "kwargs", ")"], "docstring_tokens": ["str", "-", ">", "None"]}
{"code_tokens": ["def", "ckplayer_get_info_by_xml", "(", "ckinfo", ")", ":", "e", "=", "ET", ".", "XML", "(", "ckinfo", ")", "video_dict", "=", "{", "'title'", ":", "''", ",", "#'duration': 0,", "'links'", ":", "[", "]", ",", "'size'", ":", "0", ",", "'flashvars'", ":", "''", ",", "}", "dictified", "=", "dictify", "(", "e", ")", "[", "'ckplayer'", "]", "if", "'info'", "in", "dictified", ":", "if", "'_text'", "in", "dictified", "[", "'info'", "]", "[", "0", "]", "[", "'title'", "]", "[", "0", "]", ":", "#title", "video_dict", "[", "'title'", "]", "=", "dictified", "[", "'info'", "]", "[", "0", "]", "[", "'title'", "]", "[", "0", "]", "[", "'_text'", "]", ".", "strip", "(", ")", "#if dictify(e)['ckplayer']['info'][0]['title'][0]['_text'].strip():  #duration", "#video_dict['title'] = dictify(e)['ckplayer']['info'][0]['title'][0]['_text'].strip()", "if", "'_text'", "in", "dictified", "[", "'video'", "]", "[", "0", "]", "[", "'size'", "]", "[", "0", "]", ":", "#size exists for 1 piece", "video_dict", "[", "'size'", "]", "=", "sum", "(", "[", "int", "(", "i", "[", "'size'", "]", "[", "0", "]", "[", "'_text'", "]", ")", "for", "i", "in", "dictified", "[", "'video'", "]", "]", ")", "if", "'_text'", "in", "dictified", "[", "'video'", "]", "[", "0", "]", "[", "'file'", "]", "[", "0", "]", ":", "#link exist", "video_dict", "[", "'links'", "]", "=", "[", "i", "[", "'file'", "]", "[", "0", "]", "[", "'_text'", "]", ".", "strip", "(", ")", "for", "i", "in", "dictified", "[", "'video'", "]", "]", "if", "'_text'", "in", "dictified", "[", "'flashvars'", "]", "[", "0", "]", ":", "video_dict", "[", "'flashvars'", "]", "=", "dictified", "[", "'flashvars'", "]", "[", "0", "]", "[", "'_text'", "]", ".", "strip", "(", ")", "return", "video_dict"], "docstring_tokens": ["str", "-", ">", "dict", "Information", "for", "CKPlayer", "API", "content", "."]}
{"code_tokens": ["def", "get_video_url_from_video_id", "(", "video_id", ")", ":", "# from js", "data", "=", "[", "\"\"", "]", "*", "256", "for", "index", ",", "_", "in", "enumerate", "(", "data", ")", ":", "t", "=", "index", "for", "i", "in", "range", "(", "8", ")", ":", "t", "=", "-", "306674912", "^", "unsigned_right_shitf", "(", "t", ",", "1", ")", "if", "1", "&", "t", "else", "unsigned_right_shitf", "(", "t", ",", "1", ")", "data", "[", "index", "]", "=", "t", "def", "tmp", "(", ")", ":", "rand_num", "=", "random", ".", "random", "(", ")", "path", "=", "\"/video/urls/v/1/toutiao/mp4/{video_id}?r={random_num}\"", ".", "format", "(", "video_id", "=", "video_id", ",", "random_num", "=", "str", "(", "rand_num", ")", "[", "2", ":", "]", ")", "e", "=", "o", "=", "r", "=", "-", "1", "i", ",", "a", "=", "0", ",", "len", "(", "path", ")", "while", "i", "<", "a", ":", "e", "=", "ord", "(", "path", "[", "i", "]", ")", "i", "+=", "1", "if", "e", "<", "128", ":", "r", "=", "unsigned_right_shitf", "(", "r", ",", "8", ")", "^", "data", "[", "255", "&", "(", "r", "^", "e", ")", "]", "else", ":", "if", "e", "<", "2048", ":", "r", "=", "unsigned_right_shitf", "(", "r", ",", "8", ")", "^", "data", "[", "255", "&", "(", "r", "^", "(", "192", "|", "e", ">>", "6", "&", "31", ")", ")", "]", "r", "=", "unsigned_right_shitf", "(", "r", ",", "8", ")", "^", "data", "[", "255", "&", "(", "r", "^", "(", "128", "|", "63", "&", "e", ")", ")", "]", "else", ":", "if", "55296", "<=", "e", "<", "57344", ":", "e", "=", "(", "1023", "&", "e", ")", "+", "64", "i", "+=", "1", "o", "=", "1023", "&", "t", ".", "url", "(", "i", ")", "r", "=", "unsigned_right_shitf", "(", "r", ",", "8", ")", "^", "data", "[", "255", "&", "(", "r", "^", "(", "240", "|", "e", ">>", "8", "&", "7", ")", ")", "]", "r", "=", "unsigned_right_shitf", "(", "r", ",", "8", ")", "^", "data", "[", "255", "&", "(", "r", "^", "(", "128", "|", "e", ">>", "2", "&", "63", ")", ")", "]", "r", "=", "unsigned_right_shitf", "(", "r", ",", "8", ")", "^", "data", "[", "255", "&", "(", "r", "^", "(", "128", "|", "o", ">>", "6", "&", "15", "|", "(", "3", "&", "e", ")", "<<", "4", ")", ")", "]", "r", "=", "unsigned_right_shitf", "(", "r", ",", "8", ")", "^", "data", "[", "255", "&", "(", "r", "^", "(", "128", "|", "63", "&", "o", ")", ")", "]", "else", ":", "r", "=", "unsigned_right_shitf", "(", "r", ",", "8", ")", "^", "data", "[", "255", "&", "(", "r", "^", "(", "224", "|", "e", ">>", "12", "&", "15", ")", ")", "]", "r", "=", "unsigned_right_shitf", "(", "r", ",", "8", ")", "^", "data", "[", "255", "&", "(", "r", "^", "(", "128", "|", "e", ">>", "6", "&", "63", ")", ")", "]", "r", "=", "unsigned_right_shitf", "(", "r", ",", "8", ")", "^", "data", "[", "255", "&", "(", "r", "^", "(", "128", "|", "63", "&", "e", ")", ")", "]", "return", "\"https://ib.365yg.com{path}&s={param}\"", ".", "format", "(", "path", "=", "path", ",", "param", "=", "unsigned_right_shitf", "(", "r", "^", "-", "1", ",", "0", ")", ")", "while", "1", ":", "url", "=", "tmp", "(", ")", "if", "url", ".", "split", "(", "\"=\"", ")", "[", "-", "1", "]", "[", "0", "]", "!=", "\"-\"", ":", "# \u53c2\u6570s\u4e0d\u80fd\u4e3a\u8d1f\u6570", "return", "url"], "docstring_tokens": ["Splicing", "URLs", "according", "to", "video", "ID", "to", "get", "video", "details"]}
{"code_tokens": ["def", "get_mgtv_real_url", "(", "url", ")", ":", "content", "=", "loads", "(", "get_content", "(", "url", ")", ")", "m3u_url", "=", "content", "[", "'info'", "]", "split", "=", "urlsplit", "(", "m3u_url", ")", "base_url", "=", "\"{scheme}://{netloc}{path}/\"", ".", "format", "(", "scheme", "=", "split", "[", "0", "]", ",", "netloc", "=", "split", "[", "1", "]", ",", "path", "=", "dirname", "(", "split", "[", "2", "]", ")", ")", "content", "=", "get_content", "(", "content", "[", "'info'", "]", ")", "#get the REAL M3U url, maybe to be changed later?", "segment_list", "=", "[", "]", "segments_size", "=", "0", "for", "i", "in", "content", ".", "split", "(", ")", ":", "if", "not", "i", ".", "startswith", "(", "'#'", ")", ":", "#not the best way, better we use the m3u8 package", "segment_list", ".", "append", "(", "base_url", "+", "i", ")", "# use ext-info for fast size calculate", "elif", "i", ".", "startswith", "(", "'#EXT-MGTV-File-SIZE:'", ")", ":", "segments_size", "+=", "int", "(", "i", "[", "i", ".", "rfind", "(", "':'", ")", "+", "1", ":", "]", ")", "return", "m3u_url", ",", "segments_size", ",", "segment_list"], "docstring_tokens": ["str", "-", ">", "list", "of", "str", "Give", "you", "the", "real", "URLs", "."]}
{"code_tokens": ["def", "legitimize", "(", "text", ",", "os", "=", "detect_os", "(", ")", ")", ":", "# POSIX systems", "text", "=", "text", ".", "translate", "(", "{", "0", ":", "None", ",", "ord", "(", "'/'", ")", ":", "'-'", ",", "ord", "(", "'|'", ")", ":", "'-'", ",", "}", ")", "# FIXME: do some filesystem detection", "if", "os", "==", "'windows'", "or", "os", "==", "'cygwin'", "or", "os", "==", "'wsl'", ":", "# Windows (non-POSIX namespace)", "text", "=", "text", ".", "translate", "(", "{", "# Reserved in Windows VFAT and NTFS", "ord", "(", "':'", ")", ":", "'-'", ",", "ord", "(", "'*'", ")", ":", "'-'", ",", "ord", "(", "'?'", ")", ":", "'-'", ",", "ord", "(", "'\\\\'", ")", ":", "'-'", ",", "ord", "(", "'\\\"'", ")", ":", "'\\''", ",", "# Reserved in Windows VFAT", "ord", "(", "'+'", ")", ":", "'-'", ",", "ord", "(", "'<'", ")", ":", "'-'", ",", "ord", "(", "'>'", ")", ":", "'-'", ",", "ord", "(", "'['", ")", ":", "'('", ",", "ord", "(", "']'", ")", ":", "')'", ",", "ord", "(", "'\\t'", ")", ":", "' '", ",", "}", ")", "else", ":", "# *nix", "if", "os", "==", "'mac'", ":", "# Mac OS HFS+", "text", "=", "text", ".", "translate", "(", "{", "ord", "(", "':'", ")", ":", "'-'", ",", "}", ")", "# Remove leading .", "if", "text", ".", "startswith", "(", "\".\"", ")", ":", "text", "=", "text", "[", "1", ":", "]", "text", "=", "text", "[", ":", "80", "]", "# Trim to 82 Unicode characters long", "return", "text"], "docstring_tokens": ["Converts", "a", "string", "to", "a", "valid", "filename", "."]}
{"code_tokens": ["def", "cbs_download", "(", "url", ",", "output_dir", "=", "'.'", ",", "merge", "=", "True", ",", "info_only", "=", "False", ",", "*", "*", "kwargs", ")", ":", "html", "=", "get_content", "(", "url", ")", "pid", "=", "match1", "(", "html", ",", "r'video\\.settings\\.pid\\s*=\\s*\\'([^\\']+)\\''", ")", "title", "=", "match1", "(", "html", ",", "r'video\\.settings\\.title\\s*=\\s*\\\"([^\\\"]+)\\\"'", ")", "theplatform_download_by_pid", "(", "pid", ",", "title", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ")"], "docstring_tokens": ["Downloads", "CBS", "videos", "by", "URL", "."]}
{"code_tokens": ["def", "download", "(", "self", ",", "*", "*", "kwargs", ")", ":", "if", "'json_output'", "in", "kwargs", "and", "kwargs", "[", "'json_output'", "]", ":", "json_output", ".", "output", "(", "self", ")", "elif", "'info_only'", "in", "kwargs", "and", "kwargs", "[", "'info_only'", "]", ":", "if", "'stream_id'", "in", "kwargs", "and", "kwargs", "[", "'stream_id'", "]", ":", "# Display the stream", "stream_id", "=", "kwargs", "[", "'stream_id'", "]", "if", "'index'", "not", "in", "kwargs", ":", "self", ".", "p", "(", "stream_id", ")", "else", ":", "self", ".", "p_i", "(", "stream_id", ")", "else", ":", "# Display all available streams", "if", "'index'", "not", "in", "kwargs", ":", "self", ".", "p", "(", "[", "]", ")", "else", ":", "stream_id", "=", "self", ".", "streams_sorted", "[", "0", "]", "[", "'id'", "]", "if", "'id'", "in", "self", ".", "streams_sorted", "[", "0", "]", "else", "self", ".", "streams_sorted", "[", "0", "]", "[", "'itag'", "]", "self", ".", "p_i", "(", "stream_id", ")", "else", ":", "if", "'stream_id'", "in", "kwargs", "and", "kwargs", "[", "'stream_id'", "]", ":", "# Download the stream", "stream_id", "=", "kwargs", "[", "'stream_id'", "]", "else", ":", "# Download stream with the best quality", "stream_id", "=", "self", ".", "streams_sorted", "[", "0", "]", "[", "'id'", "]", "if", "'id'", "in", "self", ".", "streams_sorted", "[", "0", "]", "else", "self", ".", "streams_sorted", "[", "0", "]", "[", "'itag'", "]", "if", "'index'", "not", "in", "kwargs", ":", "self", ".", "p", "(", "stream_id", ")", "else", ":", "self", ".", "p_i", "(", "stream_id", ")", "if", "stream_id", "in", "self", ".", "streams", ":", "urls", "=", "self", ".", "streams", "[", "stream_id", "]", "[", "'src'", "]", "ext", "=", "self", ".", "streams", "[", "stream_id", "]", "[", "'container'", "]", "total_size", "=", "self", ".", "streams", "[", "stream_id", "]", "[", "'size'", "]", "else", ":", "urls", "=", "self", ".", "dash_streams", "[", "stream_id", "]", "[", "'src'", "]", "ext", "=", "self", ".", "dash_streams", "[", "stream_id", "]", "[", "'container'", "]", "total_size", "=", "self", ".", "dash_streams", "[", "stream_id", "]", "[", "'size'", "]", "if", "not", "urls", ":", "log", ".", "wtf", "(", "'[Failed] Cannot extract video source.'", ")", "# For legacy main()", "#Here's the change!!", "download_url_ffmpeg", "(", "urls", "[", "0", "]", ",", "self", ".", "title", ",", "'mp4'", ",", "output_dir", "=", "kwargs", "[", "'output_dir'", "]", ",", "merge", "=", "kwargs", "[", "'merge'", "]", ",", "stream", "=", "False", ")", "if", "not", "kwargs", "[", "'caption'", "]", ":", "print", "(", "'Skipping captions.'", ")", "return", "for", "lang", "in", "self", ".", "caption_tracks", ":", "filename", "=", "'%s.%s.srt'", "%", "(", "get_filename", "(", "self", ".", "title", ")", ",", "lang", ")", "print", "(", "'Saving %s ... '", "%", "filename", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "srt", "=", "self", ".", "caption_tracks", "[", "lang", "]", "with", "open", "(", "os", ".", "path", ".", "join", "(", "kwargs", "[", "'output_dir'", "]", ",", "filename", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "x", ":", "x", ".", "write", "(", "srt", ")", "print", "(", "'Done.'", ")"], "docstring_tokens": ["Override", "the", "original", "one", "Ugly", "ugly", "dirty", "hack"]}
{"code_tokens": ["def", "acfun_download_by_vid", "(", "vid", ",", "title", ",", "output_dir", "=", "'.'", ",", "merge", "=", "True", ",", "info_only", "=", "False", ",", "*", "*", "kwargs", ")", ":", "#first call the main parasing API", "info", "=", "json", ".", "loads", "(", "get_content", "(", "'http://www.acfun.cn/video/getVideo.aspx?id='", "+", "vid", ")", ")", "sourceType", "=", "info", "[", "'sourceType'", "]", "#decide sourceId to know which extractor to use", "if", "'sourceId'", "in", "info", ":", "sourceId", "=", "info", "[", "'sourceId'", "]", "# danmakuId = info['danmakuId']", "#call extractor decided by sourceId", "if", "sourceType", "==", "'sina'", ":", "sina_download_by_vid", "(", "sourceId", ",", "title", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ")", "elif", "sourceType", "==", "'youku'", ":", "youku_download_by_vid", "(", "sourceId", ",", "title", "=", "title", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ",", "*", "*", "kwargs", ")", "elif", "sourceType", "==", "'tudou'", ":", "tudou_download_by_iid", "(", "sourceId", ",", "title", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ")", "elif", "sourceType", "==", "'qq'", ":", "qq_download_by_vid", "(", "sourceId", ",", "title", ",", "True", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ")", "elif", "sourceType", "==", "'letv'", ":", "letvcloud_download_by_vu", "(", "sourceId", ",", "'2d8c027396'", ",", "title", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ")", "elif", "sourceType", "==", "'zhuzhan'", ":", "#As in Jul.28.2016, Acfun is using embsig to anti hotlink so we need to pass this", "#In Mar. 2017 there is a dedicated ``acfun_proxy'' in youku cloud player", "#old code removed", "url", "=", "'http://www.acfun.cn/v/ac'", "+", "vid", "yk_streams", "=", "youku_acfun_proxy", "(", "info", "[", "'sourceId'", "]", ",", "info", "[", "'encode'", "]", ",", "url", ")", "seq", "=", "[", "'mp4hd3'", ",", "'mp4hd2'", ",", "'mp4hd'", ",", "'flvhd'", "]", "for", "t", "in", "seq", ":", "if", "yk_streams", ".", "get", "(", "t", ")", ":", "preferred", "=", "yk_streams", "[", "t", "]", "break", "#total_size in the json could be incorrect(F.I. 0)", "size", "=", "0", "for", "url", "in", "preferred", "[", "0", "]", ":", "_", ",", "_", ",", "seg_size", "=", "url_info", "(", "url", ")", "size", "+=", "seg_size", "#fallback to flvhd is not quite possible", "if", "re", ".", "search", "(", "r'fid=[0-9A-Z\\-]*.flv'", ",", "preferred", "[", "0", "]", "[", "0", "]", ")", ":", "ext", "=", "'flv'", "else", ":", "ext", "=", "'mp4'", "print_info", "(", "site_info", ",", "title", ",", "ext", ",", "size", ")", "if", "not", "info_only", ":", "download_urls", "(", "preferred", "[", "0", "]", ",", "title", ",", "ext", ",", "size", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ")", "else", ":", "raise", "NotImplementedError", "(", "sourceType", ")", "if", "not", "info_only", "and", "not", "dry_run", ":", "if", "not", "kwargs", "[", "'caption'", "]", ":", "print", "(", "'Skipping danmaku.'", ")", "return", "try", ":", "title", "=", "get_filename", "(", "title", ")", "print", "(", "'Downloading %s ...\\n'", "%", "(", "title", "+", "'.cmt.json'", ")", ")", "cmt", "=", "get_srt_json", "(", "vid", ")", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "title", "+", "'.cmt.json'", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "x", ":", "x", ".", "write", "(", "cmt", ")", "except", ":", "pass"], "docstring_tokens": ["str", "str", "str", "bool", "bool", "-", ">", "None"]}
{"code_tokens": ["def", "matchall", "(", "text", ",", "patterns", ")", ":", "ret", "=", "[", "]", "for", "pattern", "in", "patterns", ":", "match", "=", "re", ".", "findall", "(", "pattern", ",", "text", ")", "ret", "+=", "match", "return", "ret"], "docstring_tokens": ["Scans", "through", "a", "string", "for", "substrings", "matched", "some", "patterns", "."]}
{"code_tokens": ["def", "parse_query_param", "(", "url", ",", "param", ")", ":", "try", ":", "return", "parse", ".", "parse_qs", "(", "parse", ".", "urlparse", "(", "url", ")", ".", "query", ")", "[", "param", "]", "[", "0", "]", "except", ":", "return", "None"], "docstring_tokens": ["Parses", "the", "query", "string", "of", "a", "URL", "and", "returns", "the", "value", "of", "a", "parameter", "."]}
{"code_tokens": ["def", "get_content", "(", "url", ",", "headers", "=", "{", "}", ",", "decoded", "=", "True", ")", ":", "logging", ".", "debug", "(", "'get_content: %s'", "%", "url", ")", "req", "=", "request", ".", "Request", "(", "url", ",", "headers", "=", "headers", ")", "if", "cookies", ":", "cookies", ".", "add_cookie_header", "(", "req", ")", "req", ".", "headers", ".", "update", "(", "req", ".", "unredirected_hdrs", ")", "response", "=", "urlopen_with_retry", "(", "req", ")", "data", "=", "response", ".", "read", "(", ")", "# Handle HTTP compression for gzip and deflate (zlib)", "content_encoding", "=", "response", ".", "getheader", "(", "'Content-Encoding'", ")", "if", "content_encoding", "==", "'gzip'", ":", "data", "=", "ungzip", "(", "data", ")", "elif", "content_encoding", "==", "'deflate'", ":", "data", "=", "undeflate", "(", "data", ")", "# Decode the response body", "if", "decoded", ":", "charset", "=", "match1", "(", "response", ".", "getheader", "(", "'Content-Type'", ",", "''", ")", ",", "r'charset=([\\w-]+)'", ")", "if", "charset", "is", "not", "None", ":", "data", "=", "data", ".", "decode", "(", "charset", ",", "'ignore'", ")", "else", ":", "data", "=", "data", ".", "decode", "(", "'utf-8'", ",", "'ignore'", ")", "return", "data"], "docstring_tokens": ["Gets", "the", "content", "of", "a", "URL", "via", "sending", "a", "HTTP", "GET", "request", "."]}
{"code_tokens": ["def", "post_content", "(", "url", ",", "headers", "=", "{", "}", ",", "post_data", "=", "{", "}", ",", "decoded", "=", "True", ",", "*", "*", "kwargs", ")", ":", "if", "kwargs", ".", "get", "(", "'post_data_raw'", ")", ":", "logging", ".", "debug", "(", "'post_content: %s\\npost_data_raw: %s'", "%", "(", "url", ",", "kwargs", "[", "'post_data_raw'", "]", ")", ")", "else", ":", "logging", ".", "debug", "(", "'post_content: %s\\npost_data: %s'", "%", "(", "url", ",", "post_data", ")", ")", "req", "=", "request", ".", "Request", "(", "url", ",", "headers", "=", "headers", ")", "if", "cookies", ":", "cookies", ".", "add_cookie_header", "(", "req", ")", "req", ".", "headers", ".", "update", "(", "req", ".", "unredirected_hdrs", ")", "if", "kwargs", ".", "get", "(", "'post_data_raw'", ")", ":", "post_data_enc", "=", "bytes", "(", "kwargs", "[", "'post_data_raw'", "]", ",", "'utf-8'", ")", "else", ":", "post_data_enc", "=", "bytes", "(", "parse", ".", "urlencode", "(", "post_data", ")", ",", "'utf-8'", ")", "response", "=", "urlopen_with_retry", "(", "req", ",", "data", "=", "post_data_enc", ")", "data", "=", "response", ".", "read", "(", ")", "# Handle HTTP compression for gzip and deflate (zlib)", "content_encoding", "=", "response", ".", "getheader", "(", "'Content-Encoding'", ")", "if", "content_encoding", "==", "'gzip'", ":", "data", "=", "ungzip", "(", "data", ")", "elif", "content_encoding", "==", "'deflate'", ":", "data", "=", "undeflate", "(", "data", ")", "# Decode the response body", "if", "decoded", ":", "charset", "=", "match1", "(", "response", ".", "getheader", "(", "'Content-Type'", ")", ",", "r'charset=([\\w-]+)'", ")", "if", "charset", "is", "not", "None", ":", "data", "=", "data", ".", "decode", "(", "charset", ")", "else", ":", "data", "=", "data", ".", "decode", "(", "'utf-8'", ")", "return", "data"], "docstring_tokens": ["Post", "the", "content", "of", "a", "URL", "via", "sending", "a", "HTTP", "POST", "request", "."]}
{"code_tokens": ["def", "parse_host", "(", "host", ")", ":", "if", "re", ".", "match", "(", "r'^(\\d+)$'", ",", "host", ")", "is", "not", "None", ":", "return", "(", "\"0.0.0.0\"", ",", "int", "(", "host", ")", ")", "if", "re", ".", "match", "(", "r'^(\\w+)://'", ",", "host", ")", "is", "None", ":", "host", "=", "\"//\"", "+", "host", "o", "=", "parse", ".", "urlparse", "(", "host", ")", "hostname", "=", "o", ".", "hostname", "or", "\"0.0.0.0\"", "port", "=", "o", ".", "port", "or", "0", "return", "(", "hostname", ",", "port", ")"], "docstring_tokens": ["Parses", "host", "name", "and", "port", "number", "from", "a", "string", "."]}
{"code_tokens": ["def", "showroom_get_roomid_by_room_url_key", "(", "room_url_key", ")", ":", "fake_headers_mobile", "=", "{", "'Accept'", ":", "'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'", ",", "'Accept-Charset'", ":", "'UTF-8,*;q=0.5'", ",", "'Accept-Encoding'", ":", "'gzip,deflate,sdch'", ",", "'Accept-Language'", ":", "'en-US,en;q=0.8'", ",", "'User-Agent'", ":", "'Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.114 Mobile Safari/537.36'", "}", "webpage_url", "=", "'https://www.showroom-live.com/'", "+", "room_url_key", "html", "=", "get_content", "(", "webpage_url", ",", "headers", "=", "fake_headers_mobile", ")", "roomid", "=", "match1", "(", "html", ",", "r'room\\?room_id\\=(\\d+)'", ")", "assert", "roomid", "return", "roomid"], "docstring_tokens": ["str", "-", ">", "str"]}
{"code_tokens": ["def", "_wanmen_get_title_by_json_topic_part", "(", "json_content", ",", "tIndex", ",", "pIndex", ")", ":", "return", "'_'", ".", "join", "(", "[", "json_content", "[", "0", "]", "[", "'name'", "]", ",", "json_content", "[", "0", "]", "[", "'Topics'", "]", "[", "tIndex", "]", "[", "'name'", "]", ",", "json_content", "[", "0", "]", "[", "'Topics'", "]", "[", "tIndex", "]", "[", "'Parts'", "]", "[", "pIndex", "]", "[", "'name'", "]", "]", ")"], "docstring_tokens": ["JSON", "int", "int", "int", "-", ">", "str", "Get", "a", "proper", "title", "with", "courseid", "+", "topicID", "+", "partID", "."]}
{"code_tokens": ["def", "wanmen_download_by_course", "(", "json_api_content", ",", "output_dir", "=", "'.'", ",", "merge", "=", "True", ",", "info_only", "=", "False", ",", "*", "*", "kwargs", ")", ":", "for", "tIndex", "in", "range", "(", "len", "(", "json_api_content", "[", "0", "]", "[", "'Topics'", "]", ")", ")", ":", "for", "pIndex", "in", "range", "(", "len", "(", "json_api_content", "[", "0", "]", "[", "'Topics'", "]", "[", "tIndex", "]", "[", "'Parts'", "]", ")", ")", ":", "wanmen_download_by_course_topic_part", "(", "json_api_content", ",", "tIndex", ",", "pIndex", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ",", "*", "*", "kwargs", ")"], "docstring_tokens": ["int", "-", ">", "None", "Download", "a", "WHOLE", "course", ".", "Reuse", "the", "API", "call", "to", "save", "time", "."]}
{"code_tokens": ["def", "wanmen_download_by_course_topic_part", "(", "json_api_content", ",", "tIndex", ",", "pIndex", ",", "output_dir", "=", "'.'", ",", "merge", "=", "True", ",", "info_only", "=", "False", ",", "*", "*", "kwargs", ")", ":", "html", "=", "json_api_content", "title", "=", "_wanmen_get_title_by_json_topic_part", "(", "html", ",", "tIndex", ",", "pIndex", ")", "bokeccID", "=", "_wanmen_get_boke_id_by_json_topic_part", "(", "html", ",", "tIndex", ",", "pIndex", ")", "bokecc_download_by_id", "(", "vid", "=", "bokeccID", ",", "title", "=", "title", ",", "output_dir", "=", "output_dir", ",", "merge", "=", "merge", ",", "info_only", "=", "info_only", ",", "*", "*", "kwargs", ")"], "docstring_tokens": ["int", "int", "int", "-", ">", "None", "Download", "ONE", "PART", "of", "the", "course", "."]}
{"code_tokens": ["def", "has_task", "(", "self", ",", "task_instance", ")", ":", "if", "task_instance", ".", "key", "in", "self", ".", "queued_tasks", "or", "task_instance", ".", "key", "in", "self", ".", "running", ":", "return", "True"], "docstring_tokens": ["Checks", "if", "a", "task", "is", "either", "queued", "or", "running", "in", "this", "executor"]}
{"code_tokens": ["def", "get_event_buffer", "(", "self", ",", "dag_ids", "=", "None", ")", ":", "cleared_events", "=", "dict", "(", ")", "if", "dag_ids", "is", "None", ":", "cleared_events", "=", "self", ".", "event_buffer", "self", ".", "event_buffer", "=", "dict", "(", ")", "else", ":", "for", "key", "in", "list", "(", "self", ".", "event_buffer", ".", "keys", "(", ")", ")", ":", "dag_id", ",", "_", ",", "_", ",", "_", "=", "key", "if", "dag_id", "in", "dag_ids", ":", "cleared_events", "[", "key", "]", "=", "self", ".", "event_buffer", ".", "pop", "(", "key", ")", "return", "cleared_events"], "docstring_tokens": ["Returns", "and", "flush", "the", "event", "buffer", ".", "In", "case", "dag_ids", "is", "specified", "it", "will", "only", "return", "and", "flush", "events", "for", "the", "given", "dag_ids", ".", "Otherwise", "it", "returns", "and", "flushes", "all"]}
{"code_tokens": ["def", "get_conn", "(", "self", ")", ":", "conn_config", "=", "self", ".", "_get_conn_params", "(", ")", "conn", "=", "snowflake", ".", "connector", ".", "connect", "(", "*", "*", "conn_config", ")", "return", "conn"], "docstring_tokens": ["Returns", "a", "snowflake", ".", "connection", "object"]}
{"code_tokens": ["def", "_get_aws_credentials", "(", "self", ")", ":", "if", "self", ".", "snowflake_conn_id", ":", "connection_object", "=", "self", ".", "get_connection", "(", "self", ".", "snowflake_conn_id", ")", "if", "'aws_secret_access_key'", "in", "connection_object", ".", "extra_dejson", ":", "aws_access_key_id", "=", "connection_object", ".", "extra_dejson", ".", "get", "(", "'aws_access_key_id'", ")", "aws_secret_access_key", "=", "connection_object", ".", "extra_dejson", ".", "get", "(", "'aws_secret_access_key'", ")", "return", "aws_access_key_id", ",", "aws_secret_access_key"], "docstring_tokens": ["returns", "aws_access_key_id", "aws_secret_access_key", "from", "extra"]}
{"code_tokens": ["def", "_get_field", "(", "self", ",", "field_name", ",", "default", "=", "None", ")", ":", "full_field_name", "=", "'extra__grpc__{}'", ".", "format", "(", "field_name", ")", "if", "full_field_name", "in", "self", ".", "extras", ":", "return", "self", ".", "extras", "[", "full_field_name", "]", "else", ":", "return", "default"], "docstring_tokens": ["Fetches", "a", "field", "from", "extras", "and", "returns", "it", ".", "This", "is", "some", "Airflow", "magic", ".", "The", "grpc", "hook", "type", "adds", "custom", "UI", "elements", "to", "the", "hook", "page", "which", "allow", "admins", "to", "specify", "scopes", "credential", "pem", "files", "etc", ".", "They", "get", "formatted", "as", "shown", "below", "."]}
{"code_tokens": ["def", "copy_expert", "(", "self", ",", "sql", ",", "filename", ",", "open", "=", "open", ")", ":", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "with", "open", "(", "filename", ",", "'w'", ")", ":", "pass", "with", "open", "(", "filename", ",", "'r+'", ")", "as", "f", ":", "with", "closing", "(", "self", ".", "get_conn", "(", ")", ")", "as", "conn", ":", "with", "closing", "(", "conn", ".", "cursor", "(", ")", ")", "as", "cur", ":", "cur", ".", "copy_expert", "(", "sql", ",", "f", ")", "f", ".", "truncate", "(", "f", ".", "tell", "(", ")", ")", "conn", ".", "commit", "(", ")"], "docstring_tokens": ["Executes", "SQL", "using", "psycopg2", "copy_expert", "method", ".", "Necessary", "to", "execute", "COPY", "command", "without", "access", "to", "a", "superuser", "."]}
{"code_tokens": ["def", "bulk_dump", "(", "self", ",", "table", ",", "tmp_file", ")", ":", "self", ".", "copy_expert", "(", "\"COPY {table} TO STDOUT\"", ".", "format", "(", "table", "=", "table", ")", ",", "tmp_file", ")"], "docstring_tokens": ["Dumps", "a", "database", "table", "into", "a", "tab", "-", "delimited", "file"]}
{"code_tokens": ["def", "execute", "(", "self", ",", "context", ")", ":", "hook", "=", "GoogleCloudStorageHook", "(", "google_cloud_storage_conn_id", "=", "self", ".", "google_cloud_storage_conn_id", ",", "delegate_to", "=", "self", ".", "delegate_to", ")", "hook", ".", "upload", "(", "bucket_name", "=", "self", ".", "bucket", ",", "object_name", "=", "self", ".", "dst", ",", "mime_type", "=", "self", ".", "mime_type", ",", "filename", "=", "self", ".", "src", ",", "gzip", "=", "self", ".", "gzip", ",", ")"], "docstring_tokens": ["Uploads", "the", "file", "to", "Google", "cloud", "storage"]}
{"code_tokens": ["def", "max_partition", "(", "table", ",", "schema", "=", "\"default\"", ",", "field", "=", "None", ",", "filter_map", "=", "None", ",", "metastore_conn_id", "=", "'metastore_default'", ")", ":", "from", "airflow", ".", "hooks", ".", "hive_hooks", "import", "HiveMetastoreHook", "if", "'.'", "in", "table", ":", "schema", ",", "table", "=", "table", ".", "split", "(", "'.'", ")", "hh", "=", "HiveMetastoreHook", "(", "metastore_conn_id", "=", "metastore_conn_id", ")", "return", "hh", ".", "max_partition", "(", "schema", "=", "schema", ",", "table_name", "=", "table", ",", "field", "=", "field", ",", "filter_map", "=", "filter_map", ")"], "docstring_tokens": ["Gets", "the", "max", "partition", "for", "a", "table", "."]}
{"code_tokens": ["def", "get_conn", "(", "self", ")", ":", "conn", "=", "self", ".", "get_connection", "(", "self", ".", "mysql_conn_id", ")", "conn_config", "=", "{", "\"user\"", ":", "conn", ".", "login", ",", "\"passwd\"", ":", "conn", ".", "password", "or", "''", ",", "\"host\"", ":", "conn", ".", "host", "or", "'localhost'", ",", "\"db\"", ":", "self", ".", "schema", "or", "conn", ".", "schema", "or", "''", "}", "if", "not", "conn", ".", "port", ":", "conn_config", "[", "\"port\"", "]", "=", "3306", "else", ":", "conn_config", "[", "\"port\"", "]", "=", "int", "(", "conn", ".", "port", ")", "if", "conn", ".", "extra_dejson", ".", "get", "(", "'charset'", ",", "False", ")", ":", "conn_config", "[", "\"charset\"", "]", "=", "conn", ".", "extra_dejson", "[", "\"charset\"", "]", "if", "(", "conn_config", "[", "\"charset\"", "]", ")", ".", "lower", "(", ")", "==", "'utf8'", "or", "(", "conn_config", "[", "\"charset\"", "]", ")", ".", "lower", "(", ")", "==", "'utf-8'", ":", "conn_config", "[", "\"use_unicode\"", "]", "=", "True", "if", "conn", ".", "extra_dejson", ".", "get", "(", "'cursor'", ",", "False", ")", ":", "if", "(", "conn", ".", "extra_dejson", "[", "\"cursor\"", "]", ")", ".", "lower", "(", ")", "==", "'sscursor'", ":", "conn_config", "[", "\"cursorclass\"", "]", "=", "MySQLdb", ".", "cursors", ".", "SSCursor", "elif", "(", "conn", ".", "extra_dejson", "[", "\"cursor\"", "]", ")", ".", "lower", "(", ")", "==", "'dictcursor'", ":", "conn_config", "[", "\"cursorclass\"", "]", "=", "MySQLdb", ".", "cursors", ".", "DictCursor", "elif", "(", "conn", ".", "extra_dejson", "[", "\"cursor\"", "]", ")", ".", "lower", "(", ")", "==", "'ssdictcursor'", ":", "conn_config", "[", "\"cursorclass\"", "]", "=", "MySQLdb", ".", "cursors", ".", "SSDictCursor", "local_infile", "=", "conn", ".", "extra_dejson", ".", "get", "(", "'local_infile'", ",", "False", ")", "if", "conn", ".", "extra_dejson", ".", "get", "(", "'ssl'", ",", "False", ")", ":", "# SSL parameter for MySQL has to be a dictionary and in case", "# of extra/dejson we can get string if extra is passed via", "# URL parameters", "dejson_ssl", "=", "conn", ".", "extra_dejson", "[", "'ssl'", "]", "if", "isinstance", "(", "dejson_ssl", ",", "six", ".", "string_types", ")", ":", "dejson_ssl", "=", "json", ".", "loads", "(", "dejson_ssl", ")", "conn_config", "[", "'ssl'", "]", "=", "dejson_ssl", "if", "conn", ".", "extra_dejson", ".", "get", "(", "'unix_socket'", ")", ":", "conn_config", "[", "'unix_socket'", "]", "=", "conn", ".", "extra_dejson", "[", "'unix_socket'", "]", "if", "local_infile", ":", "conn_config", "[", "\"local_infile\"", "]", "=", "1", "conn", "=", "MySQLdb", ".", "connect", "(", "*", "*", "conn_config", ")", "return", "conn"], "docstring_tokens": ["Returns", "a", "mysql", "connection", "object"]}
{"code_tokens": ["def", "task_state", "(", "args", ")", ":", "dag", "=", "get_dag", "(", "args", ")", "task", "=", "dag", ".", "get_task", "(", "task_id", "=", "args", ".", "task_id", ")", "ti", "=", "TaskInstance", "(", "task", ",", "args", ".", "execution_date", ")", "print", "(", "ti", ".", "current_state", "(", ")", ")"], "docstring_tokens": ["Returns", "the", "state", "of", "a", "TaskInstance", "at", "the", "command", "line", ".", ">>>", "airflow", "task_state", "tutorial", "sleep", "2015", "-", "01", "-", "01", "success"]}
{"code_tokens": ["def", "restart_workers", "(", "gunicorn_master_proc", ",", "num_workers_expected", ",", "master_timeout", ")", ":", "def", "wait_until_true", "(", "fn", ",", "timeout", "=", "0", ")", ":", "\"\"\"\n        Sleeps until fn is true\n        \"\"\"", "t", "=", "time", ".", "time", "(", ")", "while", "not", "fn", "(", ")", ":", "if", "0", "<", "timeout", "<=", "time", ".", "time", "(", ")", "-", "t", ":", "raise", "AirflowWebServerTimeout", "(", "\"No response from gunicorn master within {0} seconds\"", ".", "format", "(", "timeout", ")", ")", "time", ".", "sleep", "(", "0.1", ")", "def", "start_refresh", "(", "gunicorn_master_proc", ")", ":", "batch_size", "=", "conf", ".", "getint", "(", "'webserver'", ",", "'worker_refresh_batch_size'", ")", "log", ".", "debug", "(", "'%s doing a refresh of %s workers'", ",", "state", ",", "batch_size", ")", "sys", ".", "stdout", ".", "flush", "(", ")", "sys", ".", "stderr", ".", "flush", "(", ")", "excess", "=", "0", "for", "_", "in", "range", "(", "batch_size", ")", ":", "gunicorn_master_proc", ".", "send_signal", "(", "signal", ".", "SIGTTIN", ")", "excess", "+=", "1", "wait_until_true", "(", "lambda", ":", "num_workers_expected", "+", "excess", "==", "get_num_workers_running", "(", "gunicorn_master_proc", ")", ",", "master_timeout", ")", "try", ":", "wait_until_true", "(", "lambda", ":", "num_workers_expected", "==", "get_num_workers_running", "(", "gunicorn_master_proc", ")", ",", "master_timeout", ")", "while", "True", ":", "num_workers_running", "=", "get_num_workers_running", "(", "gunicorn_master_proc", ")", "num_ready_workers_running", "=", "get_num_ready_workers_running", "(", "gunicorn_master_proc", ")", "state", "=", "'[{0} / {1}]'", ".", "format", "(", "num_ready_workers_running", ",", "num_workers_running", ")", "# Whenever some workers are not ready, wait until all workers are ready", "if", "num_ready_workers_running", "<", "num_workers_running", ":", "log", ".", "debug", "(", "'%s some workers are starting up, waiting...'", ",", "state", ")", "sys", ".", "stdout", ".", "flush", "(", ")", "time", ".", "sleep", "(", "1", ")", "# Kill a worker gracefully by asking gunicorn to reduce number of workers", "elif", "num_workers_running", ">", "num_workers_expected", ":", "excess", "=", "num_workers_running", "-", "num_workers_expected", "log", ".", "debug", "(", "'%s killing %s workers'", ",", "state", ",", "excess", ")", "for", "_", "in", "range", "(", "excess", ")", ":", "gunicorn_master_proc", ".", "send_signal", "(", "signal", ".", "SIGTTOU", ")", "excess", "-=", "1", "wait_until_true", "(", "lambda", ":", "num_workers_expected", "+", "excess", "==", "get_num_workers_running", "(", "gunicorn_master_proc", ")", ",", "master_timeout", ")", "# Start a new worker by asking gunicorn to increase number of workers", "elif", "num_workers_running", "==", "num_workers_expected", ":", "refresh_interval", "=", "conf", ".", "getint", "(", "'webserver'", ",", "'worker_refresh_interval'", ")", "log", ".", "debug", "(", "'%s sleeping for %ss starting doing a refresh...'", ",", "state", ",", "refresh_interval", ")", "time", ".", "sleep", "(", "refresh_interval", ")", "start_refresh", "(", "gunicorn_master_proc", ")", "else", ":", "# num_ready_workers_running == num_workers_running < num_workers_expected", "log", ".", "error", "(", "(", "\"%s some workers seem to have died and gunicorn\"", "\"did not restart them as expected\"", ")", ",", "state", ")", "time", ".", "sleep", "(", "10", ")", "if", "len", "(", "psutil", ".", "Process", "(", "gunicorn_master_proc", ".", "pid", ")", ".", "children", "(", ")", ")", "<", "num_workers_expected", ":", "start_refresh", "(", "gunicorn_master_proc", ")", "except", "(", "AirflowWebServerTimeout", ",", "OSError", ")", "as", "err", ":", "log", ".", "error", "(", "err", ")", "log", ".", "error", "(", "\"Shutting down webserver\"", ")", "try", ":", "gunicorn_master_proc", ".", "terminate", "(", ")", "gunicorn_master_proc", ".", "wait", "(", ")", "finally", ":", "sys", ".", "exit", "(", "1", ")"], "docstring_tokens": ["Runs", "forever", "monitoring", "the", "child", "processes", "of"]}
{"code_tokens": ["def", "get_conn", "(", "self", ")", ":", "if", "not", "self", ".", "_client", ":", "self", ".", "_client", "=", "Client", "(", "credentials", "=", "self", ".", "_get_credentials", "(", ")", ")", "return", "self", ".", "_client"], "docstring_tokens": ["Retrieves", "connection", "to", "Cloud", "Translate"]}
{"code_tokens": ["def", "translate", "(", "self", ",", "values", ",", "target_language", ",", "format_", "=", "None", ",", "source_language", "=", "None", ",", "model", "=", "None", ")", ":", "client", "=", "self", ".", "get_conn", "(", ")", "return", "client", ".", "translate", "(", "values", "=", "values", ",", "target_language", "=", "target_language", ",", "format_", "=", "format_", ",", "source_language", "=", "source_language", ",", "model", "=", "model", ",", ")"], "docstring_tokens": ["Translate", "a", "string", "or", "list", "of", "strings", "."]}
{"code_tokens": ["def", "get_instance", "(", "self", ",", "instance", ",", "project_id", "=", "None", ")", ":", "return", "self", ".", "get_conn", "(", ")", ".", "instances", "(", ")", ".", "get", "(", "project", "=", "project_id", ",", "instance", "=", "instance", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")"], "docstring_tokens": ["Retrieves", "a", "resource", "containing", "information", "about", "a", "Cloud", "SQL", "instance", "."]}
{"code_tokens": ["def", "create_instance", "(", "self", ",", "body", ",", "project_id", "=", "None", ")", ":", "response", "=", "self", ".", "get_conn", "(", ")", ".", "instances", "(", ")", ".", "insert", "(", "project", "=", "project_id", ",", "body", "=", "body", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")", "operation_name", "=", "response", "[", "\"name\"", "]", "self", ".", "_wait_for_operation_to_complete", "(", "project_id", "=", "project_id", ",", "operation_name", "=", "operation_name", ")"], "docstring_tokens": ["Creates", "a", "new", "Cloud", "SQL", "instance", "."]}
{"code_tokens": ["def", "patch_instance", "(", "self", ",", "body", ",", "instance", ",", "project_id", "=", "None", ")", ":", "response", "=", "self", ".", "get_conn", "(", ")", ".", "instances", "(", ")", ".", "patch", "(", "project", "=", "project_id", ",", "instance", "=", "instance", ",", "body", "=", "body", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")", "operation_name", "=", "response", "[", "\"name\"", "]", "self", ".", "_wait_for_operation_to_complete", "(", "project_id", "=", "project_id", ",", "operation_name", "=", "operation_name", ")"], "docstring_tokens": ["Updates", "settings", "of", "a", "Cloud", "SQL", "instance", "."]}
{"code_tokens": ["def", "delete_instance", "(", "self", ",", "instance", ",", "project_id", "=", "None", ")", ":", "response", "=", "self", ".", "get_conn", "(", ")", ".", "instances", "(", ")", ".", "delete", "(", "project", "=", "project_id", ",", "instance", "=", "instance", ",", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")", "operation_name", "=", "response", "[", "\"name\"", "]", "self", ".", "_wait_for_operation_to_complete", "(", "project_id", "=", "project_id", ",", "operation_name", "=", "operation_name", ")"], "docstring_tokens": ["Deletes", "a", "Cloud", "SQL", "instance", "."]}
{"code_tokens": ["def", "get_database", "(", "self", ",", "instance", ",", "database", ",", "project_id", "=", "None", ")", ":", "return", "self", ".", "get_conn", "(", ")", ".", "databases", "(", ")", ".", "get", "(", "project", "=", "project_id", ",", "instance", "=", "instance", ",", "database", "=", "database", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")"], "docstring_tokens": ["Retrieves", "a", "database", "resource", "from", "a", "Cloud", "SQL", "instance", "."]}
{"code_tokens": ["def", "create_database", "(", "self", ",", "instance", ",", "body", ",", "project_id", "=", "None", ")", ":", "response", "=", "self", ".", "get_conn", "(", ")", ".", "databases", "(", ")", ".", "insert", "(", "project", "=", "project_id", ",", "instance", "=", "instance", ",", "body", "=", "body", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")", "operation_name", "=", "response", "[", "\"name\"", "]", "self", ".", "_wait_for_operation_to_complete", "(", "project_id", "=", "project_id", ",", "operation_name", "=", "operation_name", ")"], "docstring_tokens": ["Creates", "a", "new", "database", "inside", "a", "Cloud", "SQL", "instance", "."]}
{"code_tokens": ["def", "patch_database", "(", "self", ",", "instance", ",", "database", ",", "body", ",", "project_id", "=", "None", ")", ":", "response", "=", "self", ".", "get_conn", "(", ")", ".", "databases", "(", ")", ".", "patch", "(", "project", "=", "project_id", ",", "instance", "=", "instance", ",", "database", "=", "database", ",", "body", "=", "body", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")", "operation_name", "=", "response", "[", "\"name\"", "]", "self", ".", "_wait_for_operation_to_complete", "(", "project_id", "=", "project_id", ",", "operation_name", "=", "operation_name", ")"], "docstring_tokens": ["Updates", "a", "database", "resource", "inside", "a", "Cloud", "SQL", "instance", "."]}
{"code_tokens": ["def", "delete_database", "(", "self", ",", "instance", ",", "database", ",", "project_id", "=", "None", ")", ":", "response", "=", "self", ".", "get_conn", "(", ")", ".", "databases", "(", ")", ".", "delete", "(", "project", "=", "project_id", ",", "instance", "=", "instance", ",", "database", "=", "database", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")", "operation_name", "=", "response", "[", "\"name\"", "]", "self", ".", "_wait_for_operation_to_complete", "(", "project_id", "=", "project_id", ",", "operation_name", "=", "operation_name", ")"], "docstring_tokens": ["Deletes", "a", "database", "from", "a", "Cloud", "SQL", "instance", "."]}
{"code_tokens": ["def", "export_instance", "(", "self", ",", "instance", ",", "body", ",", "project_id", "=", "None", ")", ":", "try", ":", "response", "=", "self", ".", "get_conn", "(", ")", ".", "instances", "(", ")", ".", "export", "(", "project", "=", "project_id", ",", "instance", "=", "instance", ",", "body", "=", "body", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")", "operation_name", "=", "response", "[", "\"name\"", "]", "self", ".", "_wait_for_operation_to_complete", "(", "project_id", "=", "project_id", ",", "operation_name", "=", "operation_name", ")", "except", "HttpError", "as", "ex", ":", "raise", "AirflowException", "(", "'Exporting instance {} failed: {}'", ".", "format", "(", "instance", ",", "ex", ".", "content", ")", ")"], "docstring_tokens": ["Exports", "data", "from", "a", "Cloud", "SQL", "instance", "to", "a", "Cloud", "Storage", "bucket", "as", "a", "SQL", "dump", "or", "CSV", "file", "."]}
{"code_tokens": ["def", "start_proxy", "(", "self", ")", ":", "self", ".", "_download_sql_proxy_if_needed", "(", ")", "if", "self", ".", "sql_proxy_process", ":", "raise", "AirflowException", "(", "\"The sql proxy is already running: {}\"", ".", "format", "(", "self", ".", "sql_proxy_process", ")", ")", "else", ":", "command_to_run", "=", "[", "self", ".", "sql_proxy_path", "]", "command_to_run", ".", "extend", "(", "self", ".", "command_line_parameters", ")", "try", ":", "self", ".", "log", ".", "info", "(", "\"Creating directory %s\"", ",", "self", ".", "cloud_sql_proxy_socket_directory", ")", "os", ".", "makedirs", "(", "self", ".", "cloud_sql_proxy_socket_directory", ")", "except", "OSError", ":", "# Needed for python 2 compatibility (exists_ok missing)", "pass", "command_to_run", ".", "extend", "(", "self", ".", "_get_credential_parameters", "(", ")", ")", "self", ".", "log", ".", "info", "(", "\"Running the command: `%s`\"", ",", "\" \"", ".", "join", "(", "command_to_run", ")", ")", "self", ".", "sql_proxy_process", "=", "Popen", "(", "command_to_run", ",", "stdin", "=", "PIPE", ",", "stdout", "=", "PIPE", ",", "stderr", "=", "PIPE", ")", "self", ".", "log", ".", "info", "(", "\"The pid of cloud_sql_proxy: %s\"", ",", "self", ".", "sql_proxy_process", ".", "pid", ")", "while", "True", ":", "line", "=", "self", ".", "sql_proxy_process", ".", "stderr", ".", "readline", "(", ")", ".", "decode", "(", "'utf-8'", ")", "return_code", "=", "self", ".", "sql_proxy_process", ".", "poll", "(", ")", "if", "line", "==", "''", "and", "return_code", "is", "not", "None", ":", "self", ".", "sql_proxy_process", "=", "None", "raise", "AirflowException", "(", "\"The cloud_sql_proxy finished early with return code {}!\"", ".", "format", "(", "return_code", ")", ")", "if", "line", "!=", "''", ":", "self", ".", "log", ".", "info", "(", "line", ")", "if", "\"googleapi: Error\"", "in", "line", "or", "\"invalid instance name:\"", "in", "line", ":", "self", ".", "stop_proxy", "(", ")", "raise", "AirflowException", "(", "\"Error when starting the cloud_sql_proxy {}!\"", ".", "format", "(", "line", ")", ")", "if", "\"Ready for new connections\"", "in", "line", ":", "return"], "docstring_tokens": ["Starts", "Cloud", "SQL", "Proxy", "."]}
{"code_tokens": ["def", "stop_proxy", "(", "self", ")", ":", "if", "not", "self", ".", "sql_proxy_process", ":", "raise", "AirflowException", "(", "\"The sql proxy is not started yet\"", ")", "else", ":", "self", ".", "log", ".", "info", "(", "\"Stopping the cloud_sql_proxy pid: %s\"", ",", "self", ".", "sql_proxy_process", ".", "pid", ")", "self", ".", "sql_proxy_process", ".", "kill", "(", ")", "self", ".", "sql_proxy_process", "=", "None", "# Cleanup!", "self", ".", "log", ".", "info", "(", "\"Removing the socket directory: %s\"", ",", "self", ".", "cloud_sql_proxy_socket_directory", ")", "shutil", ".", "rmtree", "(", "self", ".", "cloud_sql_proxy_socket_directory", ",", "ignore_errors", "=", "True", ")", "if", "self", ".", "sql_proxy_was_downloaded", ":", "self", ".", "log", ".", "info", "(", "\"Removing downloaded proxy: %s\"", ",", "self", ".", "sql_proxy_path", ")", "# Silently ignore if the file has already been removed (concurrency)", "try", ":", "os", ".", "remove", "(", "self", ".", "sql_proxy_path", ")", "except", "OSError", "as", "e", ":", "if", "not", "e", ".", "errno", "==", "errno", ".", "ENOENT", ":", "raise", "else", ":", "self", ".", "log", ".", "info", "(", "\"Skipped removing proxy - it was not downloaded: %s\"", ",", "self", ".", "sql_proxy_path", ")", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "credentials_path", ")", ":", "self", ".", "log", ".", "info", "(", "\"Removing generated credentials file %s\"", ",", "self", ".", "credentials_path", ")", "# Here file cannot be delete by concurrent task (each task has its own copy)", "os", ".", "remove", "(", "self", ".", "credentials_path", ")"], "docstring_tokens": ["Stops", "running", "proxy", "."]}
{"code_tokens": ["def", "get_proxy_version", "(", "self", ")", ":", "self", ".", "_download_sql_proxy_if_needed", "(", ")", "command_to_run", "=", "[", "self", ".", "sql_proxy_path", "]", "command_to_run", ".", "extend", "(", "[", "'--version'", "]", ")", "command_to_run", ".", "extend", "(", "self", ".", "_get_credential_parameters", "(", ")", ")", "result", "=", "subprocess", ".", "check_output", "(", "command_to_run", ")", ".", "decode", "(", "'utf-8'", ")", "pattern", "=", "re", ".", "compile", "(", "\"^.*[V|v]ersion ([^;]*);.*$\"", ")", "m", "=", "pattern", ".", "match", "(", "result", ")", "if", "m", ":", "return", "m", ".", "group", "(", "1", ")", "else", ":", "return", "None"], "docstring_tokens": ["Returns", "version", "of", "the", "Cloud", "SQL", "Proxy", "."]}
{"code_tokens": ["def", "create_connection", "(", "self", ",", "session", "=", "None", ")", ":", "connection", "=", "Connection", "(", "conn_id", "=", "self", ".", "db_conn_id", ")", "uri", "=", "self", ".", "_generate_connection_uri", "(", ")", "self", ".", "log", ".", "info", "(", "\"Creating connection %s\"", ",", "self", ".", "db_conn_id", ")", "connection", ".", "parse_from_uri", "(", "uri", ")", "session", ".", "add", "(", "connection", ")", "session", ".", "commit", "(", ")"], "docstring_tokens": ["Create", "connection", "in", "the", "Connection", "table", "according", "to", "whether", "it", "uses", "proxy", "TCP", "UNIX", "sockets", "SSL", ".", "Connection", "ID", "will", "be", "randomly", "generated", "."]}
{"code_tokens": ["def", "retrieve_connection", "(", "self", ",", "session", "=", "None", ")", ":", "self", ".", "log", ".", "info", "(", "\"Retrieving connection %s\"", ",", "self", ".", "db_conn_id", ")", "connections", "=", "session", ".", "query", "(", "Connection", ")", ".", "filter", "(", "Connection", ".", "conn_id", "==", "self", ".", "db_conn_id", ")", "if", "connections", ".", "count", "(", ")", ":", "return", "connections", "[", "0", "]", "return", "None"], "docstring_tokens": ["Retrieves", "the", "dynamically", "created", "connection", "from", "the", "Connection", "table", "."]}
{"code_tokens": ["def", "delete_connection", "(", "self", ",", "session", "=", "None", ")", ":", "self", ".", "log", ".", "info", "(", "\"Deleting connection %s\"", ",", "self", ".", "db_conn_id", ")", "connections", "=", "session", ".", "query", "(", "Connection", ")", ".", "filter", "(", "Connection", ".", "conn_id", "==", "self", ".", "db_conn_id", ")", "if", "connections", ".", "count", "(", ")", ":", "connection", "=", "connections", "[", "0", "]", "session", ".", "delete", "(", "connection", ")", "session", ".", "commit", "(", ")", "else", ":", "self", ".", "log", ".", "info", "(", "\"Connection was already deleted!\"", ")"], "docstring_tokens": ["Delete", "the", "dynamically", "created", "connection", "from", "the", "Connection", "table", "."]}
{"code_tokens": ["def", "get_sqlproxy_runner", "(", "self", ")", ":", "if", "not", "self", ".", "use_proxy", ":", "raise", "AirflowException", "(", "\"Proxy runner can only be retrieved in case of use_proxy = True\"", ")", "return", "CloudSqlProxyRunner", "(", "path_prefix", "=", "self", ".", "sql_proxy_unique_path", ",", "instance_specification", "=", "self", ".", "_get_sqlproxy_instance_specification", "(", ")", ",", "project_id", "=", "self", ".", "project_id", ",", "sql_proxy_version", "=", "self", ".", "sql_proxy_version", ",", "sql_proxy_binary_path", "=", "self", ".", "sql_proxy_binary_path", ")"], "docstring_tokens": ["Retrieve", "Cloud", "SQL", "Proxy", "runner", ".", "It", "is", "used", "to", "manage", "the", "proxy", "lifecycle", "per", "task", "."]}
{"code_tokens": ["def", "get_database_hook", "(", "self", ")", ":", "if", "self", ".", "database_type", "==", "'postgres'", ":", "self", ".", "db_hook", "=", "PostgresHook", "(", "postgres_conn_id", "=", "self", ".", "db_conn_id", ",", "schema", "=", "self", ".", "database", ")", "else", ":", "self", ".", "db_hook", "=", "MySqlHook", "(", "mysql_conn_id", "=", "self", ".", "db_conn_id", ",", "schema", "=", "self", ".", "database", ")", "return", "self", ".", "db_hook"], "docstring_tokens": ["Retrieve", "database", "hook", ".", "This", "is", "the", "actual", "Postgres", "or", "MySQL", "database", "hook", "that", "uses", "proxy", "or", "connects", "directly", "to", "the", "Google", "Cloud", "SQL", "database", "."]}
{"code_tokens": ["def", "cleanup_database_hook", "(", "self", ")", ":", "if", "self", ".", "database_type", "==", "'postgres'", ":", "if", "hasattr", "(", "self", ".", "db_hook", ",", "'conn'", ")", "and", "self", ".", "db_hook", ".", "conn", "and", "self", ".", "db_hook", ".", "conn", ".", "notices", ":", "for", "output", "in", "self", ".", "db_hook", ".", "conn", ".", "notices", ":", "self", ".", "log", ".", "info", "(", "output", ")"], "docstring_tokens": ["Clean", "up", "database", "hook", "after", "it", "was", "used", "."]}
{"code_tokens": ["def", "reserve_free_tcp_port", "(", "self", ")", ":", "self", ".", "reserved_tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "self", ".", "reserved_tcp_socket", ".", "bind", "(", "(", "'127.0.0.1'", ",", "0", ")", ")", "self", ".", "sql_proxy_tcp_port", "=", "self", ".", "reserved_tcp_socket", ".", "getsockname", "(", ")", "[", "1", "]"], "docstring_tokens": ["Reserve", "free", "TCP", "port", "to", "be", "used", "by", "Cloud", "SQL", "Proxy"]}
{"code_tokens": ["def", "_normalize_mlengine_job_id", "(", "job_id", ")", ":", "# Add a prefix when a job_id starts with a digit or a template", "match", "=", "re", ".", "search", "(", "r'\\d|\\{{2}'", ",", "job_id", ")", "if", "match", "and", "match", ".", "start", "(", ")", "==", "0", ":", "job", "=", "'z_{}'", ".", "format", "(", "job_id", ")", "else", ":", "job", "=", "job_id", "# Clean up 'bad' characters except templates", "tracker", "=", "0", "cleansed_job_id", "=", "''", "for", "m", "in", "re", ".", "finditer", "(", "r'\\{{2}.+?\\}{2}'", ",", "job", ")", ":", "cleansed_job_id", "+=", "re", ".", "sub", "(", "r'[^0-9a-zA-Z]+'", ",", "'_'", ",", "job", "[", "tracker", ":", "m", ".", "start", "(", ")", "]", ")", "cleansed_job_id", "+=", "job", "[", "m", ".", "start", "(", ")", ":", "m", ".", "end", "(", ")", "]", "tracker", "=", "m", ".", "end", "(", ")", "# Clean up last substring or the full string if no templates", "cleansed_job_id", "+=", "re", ".", "sub", "(", "r'[^0-9a-zA-Z]+'", ",", "'_'", ",", "job", "[", "tracker", ":", "]", ")", "return", "cleansed_job_id"], "docstring_tokens": ["Replaces", "invalid", "MLEngine", "job_id", "characters", "with", "_", "."]}
{"code_tokens": ["def", "_get_error_code", "(", "self", ",", "e", ")", ":", "try", ":", "matches", "=", "self", ".", "error_code_pattern", ".", "match", "(", "str", "(", "e", ")", ")", "code", "=", "int", "(", "matches", ".", "group", "(", "0", ")", ")", "return", "code", "except", "ValueError", ":", "return", "e"], "docstring_tokens": ["Extract", "error", "code", "from", "ftp", "exception"]}
{"code_tokens": ["def", "clear_dag_runs", "(", ")", ":", "session", "=", "settings", ".", "Session", "(", ")", "drs", "=", "session", ".", "query", "(", "DagRun", ")", ".", "filter", "(", "DagRun", ".", "dag_id", ".", "in_", "(", "DAG_IDS", ")", ",", ")", ".", "all", "(", ")", "for", "dr", "in", "drs", ":", "logging", ".", "info", "(", "'Deleting DagRun :: {}'", ".", "format", "(", "dr", ")", ")", "session", ".", "delete", "(", "dr", ")"], "docstring_tokens": ["Remove", "any", "existing", "DAG", "runs", "for", "the", "perf", "test", "DAGs", "."]}
{"code_tokens": ["def", "clear_dag_task_instances", "(", ")", ":", "session", "=", "settings", ".", "Session", "(", ")", "TI", "=", "TaskInstance", "tis", "=", "(", "session", ".", "query", "(", "TI", ")", ".", "filter", "(", "TI", ".", "dag_id", ".", "in_", "(", "DAG_IDS", ")", ")", ".", "all", "(", ")", ")", "for", "ti", "in", "tis", ":", "logging", ".", "info", "(", "'Deleting TaskInstance :: {}'", ".", "format", "(", "ti", ")", ")", "session", ".", "delete", "(", "ti", ")", "session", ".", "commit", "(", ")"], "docstring_tokens": ["Remove", "any", "existing", "task", "instances", "for", "the", "perf", "test", "DAGs", "."]}
{"code_tokens": ["def", "set_dags_paused_state", "(", "is_paused", ")", ":", "session", "=", "settings", ".", "Session", "(", ")", "dms", "=", "session", ".", "query", "(", "DagModel", ")", ".", "filter", "(", "DagModel", ".", "dag_id", ".", "in_", "(", "DAG_IDS", ")", ")", "for", "dm", "in", "dms", ":", "logging", ".", "info", "(", "'Setting DAG :: {} is_paused={}'", ".", "format", "(", "dm", ",", "is_paused", ")", ")", "dm", ".", "is_paused", "=", "is_paused", "session", ".", "commit", "(", ")"], "docstring_tokens": ["Toggle", "the", "pause", "state", "of", "the", "DAGs", "in", "the", "test", "."]}
{"code_tokens": ["def", "print_stats", "(", "self", ")", ":", "session", "=", "settings", ".", "Session", "(", ")", "TI", "=", "TaskInstance", "tis", "=", "(", "session", ".", "query", "(", "TI", ")", ".", "filter", "(", "TI", ".", "dag_id", ".", "in_", "(", "DAG_IDS", ")", ")", ".", "all", "(", ")", ")", "successful_tis", "=", "[", "x", "for", "x", "in", "tis", "if", "x", ".", "state", "==", "State", ".", "SUCCESS", "]", "ti_perf", "=", "[", "(", "ti", ".", "dag_id", ",", "ti", ".", "task_id", ",", "ti", ".", "execution_date", ",", "(", "ti", ".", "queued_dttm", "-", "self", ".", "start_date", ")", ".", "total_seconds", "(", ")", ",", "(", "ti", ".", "start_date", "-", "self", ".", "start_date", ")", ".", "total_seconds", "(", ")", ",", "(", "ti", ".", "end_date", "-", "self", ".", "start_date", ")", ".", "total_seconds", "(", ")", ",", "ti", ".", "duration", ")", "for", "ti", "in", "successful_tis", "]", "ti_perf_df", "=", "pd", ".", "DataFrame", "(", "ti_perf", ",", "columns", "=", "[", "'dag_id'", ",", "'task_id'", ",", "'execution_date'", ",", "'queue_delay'", ",", "'start_delay'", ",", "'land_time'", ",", "'duration'", "]", ")", "print", "(", "'Performance Results'", ")", "print", "(", "'###################'", ")", "for", "dag_id", "in", "DAG_IDS", ":", "print", "(", "'DAG {}'", ".", "format", "(", "dag_id", ")", ")", "print", "(", "ti_perf_df", "[", "ti_perf_df", "[", "'dag_id'", "]", "==", "dag_id", "]", ")", "print", "(", "'###################'", ")", "if", "len", "(", "tis", ")", ">", "len", "(", "successful_tis", ")", ":", "print", "(", "\"WARNING!! The following task instances haven't completed\"", ")", "print", "(", "pd", ".", "DataFrame", "(", "[", "(", "ti", ".", "dag_id", ",", "ti", ".", "task_id", ",", "ti", ".", "execution_date", ",", "ti", ".", "state", ")", "for", "ti", "in", "filter", "(", "lambda", "x", ":", "x", ".", "state", "!=", "State", ".", "SUCCESS", ",", "tis", ")", "]", ",", "columns", "=", "[", "'dag_id'", ",", "'task_id'", ",", "'execution_date'", ",", "'state'", "]", ")", ")", "session", ".", "commit", "(", ")"], "docstring_tokens": ["Print", "operational", "metrics", "for", "the", "scheduler", "test", "."]}
{"code_tokens": ["def", "heartbeat", "(", "self", ")", ":", "super", "(", "SchedulerMetricsJob", ",", "self", ")", ".", "heartbeat", "(", ")", "session", "=", "settings", ".", "Session", "(", ")", "# Get all the relevant task instances", "TI", "=", "TaskInstance", "successful_tis", "=", "(", "session", ".", "query", "(", "TI", ")", ".", "filter", "(", "TI", ".", "dag_id", ".", "in_", "(", "DAG_IDS", ")", ")", ".", "filter", "(", "TI", ".", "state", ".", "in_", "(", "[", "State", ".", "SUCCESS", "]", ")", ")", ".", "all", "(", ")", ")", "session", ".", "commit", "(", ")", "dagbag", "=", "DagBag", "(", "SUBDIR", ")", "dags", "=", "[", "dagbag", ".", "dags", "[", "dag_id", "]", "for", "dag_id", "in", "DAG_IDS", "]", "# the tasks in perf_dag_1 and per_dag_2 have a daily schedule interval.", "num_task_instances", "=", "sum", "(", "[", "(", "timezone", ".", "utcnow", "(", ")", "-", "task", ".", "start_date", ")", ".", "days", "for", "dag", "in", "dags", "for", "task", "in", "dag", ".", "tasks", "]", ")", "if", "(", "len", "(", "successful_tis", ")", "==", "num_task_instances", "or", "(", "timezone", ".", "utcnow", "(", ")", "-", "self", ".", "start_date", ")", ".", "total_seconds", "(", ")", ">", "MAX_RUNTIME_SECS", ")", ":", "if", "len", "(", "successful_tis", ")", "==", "num_task_instances", ":", "self", ".", "log", ".", "info", "(", "\"All tasks processed! Printing stats.\"", ")", "else", ":", "self", ".", "log", ".", "info", "(", "\"Test timeout reached. Printing available stats.\"", ")", "self", ".", "print_stats", "(", ")", "set_dags_paused_state", "(", "True", ")", "sys", ".", "exit", "(", ")"], "docstring_tokens": ["Override", "the", "scheduler", "heartbeat", "to", "determine", "when", "the", "test", "is", "complete"]}
{"code_tokens": ["def", "invoke_lambda", "(", "self", ",", "payload", ")", ":", "awslambda_conn", "=", "self", ".", "get_conn", "(", ")", "response", "=", "awslambda_conn", ".", "invoke", "(", "FunctionName", "=", "self", ".", "function_name", ",", "InvocationType", "=", "self", ".", "invocation_type", ",", "LogType", "=", "self", ".", "log_type", ",", "Payload", "=", "payload", ",", "Qualifier", "=", "self", ".", "qualifier", ")", "return", "response"], "docstring_tokens": ["Invoke", "Lambda", "Function"]}
{"code_tokens": ["def", "create_evaluate_ops", "(", "task_prefix", ",", "data_format", ",", "input_paths", ",", "prediction_path", ",", "metric_fn_and_keys", ",", "validate_fn", ",", "batch_prediction_job_id", "=", "None", ",", "project_id", "=", "None", ",", "region", "=", "None", ",", "dataflow_options", "=", "None", ",", "model_uri", "=", "None", ",", "model_name", "=", "None", ",", "version_name", "=", "None", ",", "dag", "=", "None", ")", ":", "# Verify that task_prefix doesn't have any special characters except hyphen", "# '-', which is the only allowed non-alphanumeric character by Dataflow.", "if", "not", "re", ".", "match", "(", "r\"^[a-zA-Z][-A-Za-z0-9]*$\"", ",", "task_prefix", ")", ":", "raise", "AirflowException", "(", "\"Malformed task_id for DataFlowPythonOperator (only alphanumeric \"", "\"and hyphens are allowed but got: \"", "+", "task_prefix", ")", "metric_fn", ",", "metric_keys", "=", "metric_fn_and_keys", "if", "not", "callable", "(", "metric_fn", ")", ":", "raise", "AirflowException", "(", "\"`metric_fn` param must be callable.\"", ")", "if", "not", "callable", "(", "validate_fn", ")", ":", "raise", "AirflowException", "(", "\"`validate_fn` param must be callable.\"", ")", "if", "dag", "is", "not", "None", "and", "dag", ".", "default_args", "is", "not", "None", ":", "default_args", "=", "dag", ".", "default_args", "project_id", "=", "project_id", "or", "default_args", ".", "get", "(", "'project_id'", ")", "region", "=", "region", "or", "default_args", ".", "get", "(", "'region'", ")", "model_name", "=", "model_name", "or", "default_args", ".", "get", "(", "'model_name'", ")", "version_name", "=", "version_name", "or", "default_args", ".", "get", "(", "'version_name'", ")", "dataflow_options", "=", "dataflow_options", "or", "default_args", ".", "get", "(", "'dataflow_default_options'", ")", "evaluate_prediction", "=", "MLEngineBatchPredictionOperator", "(", "task_id", "=", "(", "task_prefix", "+", "\"-prediction\"", ")", ",", "project_id", "=", "project_id", ",", "job_id", "=", "batch_prediction_job_id", ",", "region", "=", "region", ",", "data_format", "=", "data_format", ",", "input_paths", "=", "input_paths", ",", "output_path", "=", "prediction_path", ",", "uri", "=", "model_uri", ",", "model_name", "=", "model_name", ",", "version_name", "=", "version_name", ",", "dag", "=", "dag", ")", "metric_fn_encoded", "=", "base64", ".", "b64encode", "(", "dill", ".", "dumps", "(", "metric_fn", ",", "recurse", "=", "True", ")", ")", "evaluate_summary", "=", "DataFlowPythonOperator", "(", "task_id", "=", "(", "task_prefix", "+", "\"-summary\"", ")", ",", "py_options", "=", "[", "\"-m\"", "]", ",", "py_file", "=", "\"airflow.contrib.utils.mlengine_prediction_summary\"", ",", "dataflow_default_options", "=", "dataflow_options", ",", "options", "=", "{", "\"prediction_path\"", ":", "prediction_path", ",", "\"metric_fn_encoded\"", ":", "metric_fn_encoded", ",", "\"metric_keys\"", ":", "','", ".", "join", "(", "metric_keys", ")", "}", ",", "dag", "=", "dag", ")", "evaluate_summary", ".", "set_upstream", "(", "evaluate_prediction", ")", "def", "apply_validate_fn", "(", "*", "args", ",", "*", "*", "kwargs", ")", ":", "prediction_path", "=", "kwargs", "[", "\"templates_dict\"", "]", "[", "\"prediction_path\"", "]", "scheme", ",", "bucket", ",", "obj", ",", "_", ",", "_", "=", "urlsplit", "(", "prediction_path", ")", "if", "scheme", "!=", "\"gs\"", "or", "not", "bucket", "or", "not", "obj", ":", "raise", "ValueError", "(", "\"Wrong format prediction_path: %s\"", ",", "prediction_path", ")", "summary", "=", "os", ".", "path", ".", "join", "(", "obj", ".", "strip", "(", "\"/\"", ")", ",", "\"prediction.summary.json\"", ")", "gcs_hook", "=", "GoogleCloudStorageHook", "(", ")", "summary", "=", "json", ".", "loads", "(", "gcs_hook", ".", "download", "(", "bucket", ",", "summary", ")", ")", "return", "validate_fn", "(", "summary", ")", "evaluate_validation", "=", "PythonOperator", "(", "task_id", "=", "(", "task_prefix", "+", "\"-validation\"", ")", ",", "python_callable", "=", "apply_validate_fn", ",", "provide_context", "=", "True", ",", "templates_dict", "=", "{", "\"prediction_path\"", ":", "prediction_path", "}", ",", "dag", "=", "dag", ")", "evaluate_validation", ".", "set_upstream", "(", "evaluate_summary", ")", "return", "evaluate_prediction", ",", "evaluate_summary", ",", "evaluate_validation"], "docstring_tokens": ["Creates", "Operators", "needed", "for", "model", "evaluation", "and", "returns", "."]}
{"code_tokens": ["def", "mkdirs", "(", "path", ",", "mode", ")", ":", "try", ":", "o_umask", "=", "os", ".", "umask", "(", "0", ")", "os", ".", "makedirs", "(", "path", ",", "mode", ")", "except", "OSError", ":", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "raise", "finally", ":", "os", ".", "umask", "(", "o_umask", ")"], "docstring_tokens": ["Creates", "the", "directory", "specified", "by", "path", "creating", "intermediate", "directories", "as", "necessary", ".", "If", "directory", "already", "exists", "this", "is", "a", "no", "-", "op", "."]}
{"code_tokens": ["def", "_convert_to_float_if_possible", "(", "s", ")", ":", "try", ":", "ret", "=", "float", "(", "s", ")", "except", "(", "ValueError", ",", "TypeError", ")", ":", "ret", "=", "s", "return", "ret"], "docstring_tokens": ["A", "small", "helper", "function", "to", "convert", "a", "string", "to", "a", "numeric", "value", "if", "appropriate"]}
{"code_tokens": ["def", "make_aware", "(", "value", ",", "timezone", "=", "None", ")", ":", "if", "timezone", "is", "None", ":", "timezone", "=", "TIMEZONE", "# Check that we won't overwrite the timezone of an aware datetime.", "if", "is_localized", "(", "value", ")", ":", "raise", "ValueError", "(", "\"make_aware expects a naive datetime, got %s\"", "%", "value", ")", "if", "hasattr", "(", "value", ",", "'fold'", ")", ":", "# In case of python 3.6 we want to do the same that pendulum does for python3.5", "# i.e in case we move clock back we want to schedule the run at the time of the second", "# instance of the same clock time rather than the first one.", "# Fold parameter has no impact in other cases so we can safely set it to 1 here", "value", "=", "value", ".", "replace", "(", "fold", "=", "1", ")", "if", "hasattr", "(", "timezone", ",", "'localize'", ")", ":", "# This method is available for pytz time zones.", "return", "timezone", ".", "localize", "(", "value", ")", "elif", "hasattr", "(", "timezone", ",", "'convert'", ")", ":", "# For pendulum", "return", "timezone", ".", "convert", "(", "value", ")", "else", ":", "# This may be wrong around DST changes!", "return", "value", ".", "replace", "(", "tzinfo", "=", "timezone", ")"], "docstring_tokens": ["Make", "a", "naive", "datetime", ".", "datetime", "in", "a", "given", "time", "zone", "aware", "."]}
{"code_tokens": ["def", "make_naive", "(", "value", ",", "timezone", "=", "None", ")", ":", "if", "timezone", "is", "None", ":", "timezone", "=", "TIMEZONE", "# Emulate the behavior of astimezone() on Python < 3.6.", "if", "is_naive", "(", "value", ")", ":", "raise", "ValueError", "(", "\"make_naive() cannot be applied to a naive datetime\"", ")", "o", "=", "value", ".", "astimezone", "(", "timezone", ")", "# cross library compatibility", "naive", "=", "dt", ".", "datetime", "(", "o", ".", "year", ",", "o", ".", "month", ",", "o", ".", "day", ",", "o", ".", "hour", ",", "o", ".", "minute", ",", "o", ".", "second", ",", "o", ".", "microsecond", ")", "return", "naive"], "docstring_tokens": ["Make", "an", "aware", "datetime", ".", "datetime", "naive", "in", "a", "given", "time", "zone", "."]}
{"code_tokens": ["def", "datetime", "(", "*", "args", ",", "*", "*", "kwargs", ")", ":", "if", "'tzinfo'", "not", "in", "kwargs", ":", "kwargs", "[", "'tzinfo'", "]", "=", "TIMEZONE", "return", "dt", ".", "datetime", "(", "*", "args", ",", "*", "*", "kwargs", ")"], "docstring_tokens": ["Wrapper", "around", "datetime", ".", "datetime", "that", "adds", "settings", ".", "TIMEZONE", "if", "tzinfo", "not", "specified"]}
{"code_tokens": ["def", "get_conn", "(", "self", ")", ":", "conn", "=", "self", ".", "get_connection", "(", "self", ".", "druid_broker_conn_id", ")", "druid_broker_conn", "=", "connect", "(", "host", "=", "conn", ".", "host", ",", "port", "=", "conn", ".", "port", ",", "path", "=", "conn", ".", "extra_dejson", ".", "get", "(", "'endpoint'", ",", "'/druid/v2/sql'", ")", ",", "scheme", "=", "conn", ".", "extra_dejson", ".", "get", "(", "'schema'", ",", "'http'", ")", ")", "self", ".", "log", ".", "info", "(", "'Get the connection to druid broker on %s'", ",", "conn", ".", "host", ")", "return", "druid_broker_conn"], "docstring_tokens": ["Establish", "a", "connection", "to", "druid", "broker", "."]}
{"code_tokens": ["def", "get_conn", "(", "self", ",", "headers", "=", "None", ")", ":", "session", "=", "requests", ".", "Session", "(", ")", "if", "self", ".", "http_conn_id", ":", "conn", "=", "self", ".", "get_connection", "(", "self", ".", "http_conn_id", ")", "if", "\"://\"", "in", "conn", ".", "host", ":", "self", ".", "base_url", "=", "conn", ".", "host", "else", ":", "# schema defaults to HTTP", "schema", "=", "conn", ".", "schema", "if", "conn", ".", "schema", "else", "\"http\"", "self", ".", "base_url", "=", "schema", "+", "\"://\"", "+", "conn", ".", "host", "if", "conn", ".", "port", ":", "self", ".", "base_url", "=", "self", ".", "base_url", "+", "\":\"", "+", "str", "(", "conn", ".", "port", ")", "if", "conn", ".", "login", ":", "session", ".", "auth", "=", "(", "conn", ".", "login", ",", "conn", ".", "password", ")", "if", "conn", ".", "extra", ":", "try", ":", "session", ".", "headers", ".", "update", "(", "conn", ".", "extra_dejson", ")", "except", "TypeError", ":", "self", ".", "log", ".", "warn", "(", "'Connection to %s has invalid extra field.'", ",", "conn", ".", "host", ")", "if", "headers", ":", "session", ".", "headers", ".", "update", "(", "headers", ")", "return", "session"], "docstring_tokens": ["Returns", "http", "session", "for", "use", "with", "requests"]}
{"code_tokens": ["def", "run", "(", "self", ",", "endpoint", ",", "data", "=", "None", ",", "headers", "=", "None", ",", "extra_options", "=", "None", ")", ":", "extra_options", "=", "extra_options", "or", "{", "}", "session", "=", "self", ".", "get_conn", "(", "headers", ")", "if", "self", ".", "base_url", "and", "not", "self", ".", "base_url", ".", "endswith", "(", "'/'", ")", "and", "endpoint", "and", "not", "endpoint", ".", "startswith", "(", "'/'", ")", ":", "url", "=", "self", ".", "base_url", "+", "'/'", "+", "endpoint", "else", ":", "url", "=", "(", "self", ".", "base_url", "or", "''", ")", "+", "(", "endpoint", "or", "''", ")", "req", "=", "None", "if", "self", ".", "method", "==", "'GET'", ":", "# GET uses params", "req", "=", "requests", ".", "Request", "(", "self", ".", "method", ",", "url", ",", "params", "=", "data", ",", "headers", "=", "headers", ")", "elif", "self", ".", "method", "==", "'HEAD'", ":", "# HEAD doesn't use params", "req", "=", "requests", ".", "Request", "(", "self", ".", "method", ",", "url", ",", "headers", "=", "headers", ")", "else", ":", "# Others use data", "req", "=", "requests", ".", "Request", "(", "self", ".", "method", ",", "url", ",", "data", "=", "data", ",", "headers", "=", "headers", ")", "prepped_request", "=", "session", ".", "prepare_request", "(", "req", ")", "self", ".", "log", ".", "info", "(", "\"Sending '%s' to url: %s\"", ",", "self", ".", "method", ",", "url", ")", "return", "self", ".", "run_and_check", "(", "session", ",", "prepped_request", ",", "extra_options", ")"], "docstring_tokens": ["Performs", "the", "request"]}
{"code_tokens": ["def", "check_response", "(", "self", ",", "response", ")", ":", "try", ":", "response", ".", "raise_for_status", "(", ")", "except", "requests", ".", "exceptions", ".", "HTTPError", ":", "self", ".", "log", ".", "error", "(", "\"HTTP error: %s\"", ",", "response", ".", "reason", ")", "if", "self", ".", "method", "not", "in", "[", "'GET'", ",", "'HEAD'", "]", ":", "self", ".", "log", ".", "error", "(", "response", ".", "text", ")", "raise", "AirflowException", "(", "str", "(", "response", ".", "status_code", ")", "+", "\":\"", "+", "response", ".", "reason", ")"], "docstring_tokens": ["Checks", "the", "status", "code", "and", "raise", "an", "AirflowException", "exception", "on", "non", "2XX", "or", "3XX", "status", "codes"]}
{"code_tokens": ["def", "run_and_check", "(", "self", ",", "session", ",", "prepped_request", ",", "extra_options", ")", ":", "extra_options", "=", "extra_options", "or", "{", "}", "try", ":", "response", "=", "session", ".", "send", "(", "prepped_request", ",", "stream", "=", "extra_options", ".", "get", "(", "\"stream\"", ",", "False", ")", ",", "verify", "=", "extra_options", ".", "get", "(", "\"verify\"", ",", "True", ")", ",", "proxies", "=", "extra_options", ".", "get", "(", "\"proxies\"", ",", "{", "}", ")", ",", "cert", "=", "extra_options", ".", "get", "(", "\"cert\"", ")", ",", "timeout", "=", "extra_options", ".", "get", "(", "\"timeout\"", ")", ",", "allow_redirects", "=", "extra_options", ".", "get", "(", "\"allow_redirects\"", ",", "True", ")", ")", "if", "extra_options", ".", "get", "(", "'check_response'", ",", "True", ")", ":", "self", ".", "check_response", "(", "response", ")", "return", "response", "except", "requests", ".", "exceptions", ".", "ConnectionError", "as", "ex", ":", "self", ".", "log", ".", "warn", "(", "str", "(", "ex", ")", "+", "' Tenacity will retry to execute the operation'", ")", "raise", "ex"], "docstring_tokens": ["Grabs", "extra", "options", "like", "timeout", "and", "actually", "runs", "the", "request", "checking", "for", "the", "result"]}
{"code_tokens": ["def", "create_session", "(", ")", ":", "session", "=", "settings", ".", "Session", "(", ")", "try", ":", "yield", "session", "session", ".", "commit", "(", ")", "except", "Exception", ":", "session", ".", "rollback", "(", ")", "raise", "finally", ":", "session", ".", "close", "(", ")"], "docstring_tokens": ["Contextmanager", "that", "will", "create", "and", "teardown", "a", "session", "."]}
{"code_tokens": ["def", "provide_session", "(", "func", ")", ":", "@", "wraps", "(", "func", ")", "def", "wrapper", "(", "*", "args", ",", "*", "*", "kwargs", ")", ":", "arg_session", "=", "'session'", "func_params", "=", "func", ".", "__code__", ".", "co_varnames", "session_in_args", "=", "arg_session", "in", "func_params", "and", "func_params", ".", "index", "(", "arg_session", ")", "<", "len", "(", "args", ")", "session_in_kwargs", "=", "arg_session", "in", "kwargs", "if", "session_in_kwargs", "or", "session_in_args", ":", "return", "func", "(", "*", "args", ",", "*", "*", "kwargs", ")", "else", ":", "with", "create_session", "(", ")", "as", "session", ":", "kwargs", "[", "arg_session", "]", "=", "session", "return", "func", "(", "*", "args", ",", "*", "*", "kwargs", ")", "return", "wrapper"], "docstring_tokens": ["Function", "decorator", "that", "provides", "a", "session", "if", "it", "isn", "t", "provided", ".", "If", "you", "want", "to", "reuse", "a", "session", "or", "run", "the", "function", "as", "part", "of", "a", "database", "transaction", "you", "pass", "it", "to", "the", "function", "if", "not", "this", "wrapper", "will", "create", "one", "and", "close", "it", "for", "you", "."]}
{"code_tokens": ["def", "resetdb", "(", ")", ":", "from", "airflow", "import", "models", "# alembic adds significant import time, so we import it lazily", "from", "alembic", ".", "migration", "import", "MigrationContext", "log", ".", "info", "(", "\"Dropping tables that exist\"", ")", "models", ".", "base", ".", "Base", ".", "metadata", ".", "drop_all", "(", "settings", ".", "engine", ")", "mc", "=", "MigrationContext", ".", "configure", "(", "settings", ".", "engine", ")", "if", "mc", ".", "_version", ".", "exists", "(", "settings", ".", "engine", ")", ":", "mc", ".", "_version", ".", "drop", "(", "settings", ".", "engine", ")", "from", "flask_appbuilder", ".", "models", ".", "sqla", "import", "Base", "Base", ".", "metadata", ".", "drop_all", "(", "settings", ".", "engine", ")", "initdb", "(", ")"], "docstring_tokens": ["Clear", "out", "the", "database"]}
{"code_tokens": ["def", "_get_pretty_exception_message", "(", "e", ")", ":", "if", "(", "hasattr", "(", "e", ",", "'message'", ")", "and", "'errorName'", "in", "e", ".", "message", "and", "'message'", "in", "e", ".", "message", ")", ":", "return", "(", "'{name}: {message}'", ".", "format", "(", "name", "=", "e", ".", "message", "[", "'errorName'", "]", ",", "message", "=", "e", ".", "message", "[", "'message'", "]", ")", ")", "else", ":", "return", "str", "(", "e", ")"], "docstring_tokens": ["Parses", "some", "DatabaseError", "to", "provide", "a", "better", "error", "message"]}
{"code_tokens": ["def", "get_records", "(", "self", ",", "hql", ",", "parameters", "=", "None", ")", ":", "try", ":", "return", "super", "(", ")", ".", "get_records", "(", "self", ".", "_strip_sql", "(", "hql", ")", ",", "parameters", ")", "except", "DatabaseError", "as", "e", ":", "raise", "PrestoException", "(", "self", ".", "_get_pretty_exception_message", "(", "e", ")", ")"], "docstring_tokens": ["Get", "a", "set", "of", "records", "from", "Presto"]}
{"code_tokens": ["def", "get_pandas_df", "(", "self", ",", "hql", ",", "parameters", "=", "None", ")", ":", "import", "pandas", "cursor", "=", "self", ".", "get_cursor", "(", ")", "try", ":", "cursor", ".", "execute", "(", "self", ".", "_strip_sql", "(", "hql", ")", ",", "parameters", ")", "data", "=", "cursor", ".", "fetchall", "(", ")", "except", "DatabaseError", "as", "e", ":", "raise", "PrestoException", "(", "self", ".", "_get_pretty_exception_message", "(", "e", ")", ")", "column_descriptions", "=", "cursor", ".", "description", "if", "data", ":", "df", "=", "pandas", ".", "DataFrame", "(", "data", ")", "df", ".", "columns", "=", "[", "c", "[", "0", "]", "for", "c", "in", "column_descriptions", "]", "else", ":", "df", "=", "pandas", ".", "DataFrame", "(", ")", "return", "df"], "docstring_tokens": ["Get", "a", "pandas", "dataframe", "from", "a", "sql", "query", "."]}
{"code_tokens": ["def", "run", "(", "self", ",", "hql", ",", "parameters", "=", "None", ")", ":", "return", "super", "(", ")", ".", "run", "(", "self", ".", "_strip_sql", "(", "hql", ")", ",", "parameters", ")"], "docstring_tokens": ["Execute", "the", "statement", "against", "Presto", ".", "Can", "be", "used", "to", "create", "views", "."]}
{"code_tokens": ["def", "insert_rows", "(", "self", ",", "table", ",", "rows", ",", "target_fields", "=", "None", ")", ":", "super", "(", ")", ".", "insert_rows", "(", "table", ",", "rows", ",", "target_fields", ",", "0", ")"], "docstring_tokens": ["A", "generic", "way", "to", "insert", "a", "set", "of", "tuples", "into", "a", "table", "."]}
{"code_tokens": ["def", "get_conn", "(", "self", ")", ":", "if", "self", ".", "cosmos_client", "is", "not", "None", ":", "return", "self", ".", "cosmos_client", "# Initialize the Python Azure Cosmos DB client", "self", ".", "cosmos_client", "=", "cosmos_client", ".", "CosmosClient", "(", "self", ".", "endpoint_uri", ",", "{", "'masterKey'", ":", "self", ".", "master_key", "}", ")", "return", "self", ".", "cosmos_client"], "docstring_tokens": ["Return", "a", "cosmos", "db", "client", "."]}
{"code_tokens": ["def", "does_collection_exist", "(", "self", ",", "collection_name", ",", "database_name", "=", "None", ")", ":", "if", "collection_name", "is", "None", ":", "raise", "AirflowBadRequest", "(", "\"Collection name cannot be None.\"", ")", "existing_container", "=", "list", "(", "self", ".", "get_conn", "(", ")", ".", "QueryContainers", "(", "get_database_link", "(", "self", ".", "__get_database_name", "(", "database_name", ")", ")", ",", "{", "\"query\"", ":", "\"SELECT * FROM r WHERE r.id=@id\"", ",", "\"parameters\"", ":", "[", "{", "\"name\"", ":", "\"@id\"", ",", "\"value\"", ":", "collection_name", "}", "]", "}", ")", ")", "if", "len", "(", "existing_container", ")", "==", "0", ":", "return", "False", "return", "True"], "docstring_tokens": ["Checks", "if", "a", "collection", "exists", "in", "CosmosDB", "."]}
{"code_tokens": ["def", "create_collection", "(", "self", ",", "collection_name", ",", "database_name", "=", "None", ")", ":", "if", "collection_name", "is", "None", ":", "raise", "AirflowBadRequest", "(", "\"Collection name cannot be None.\"", ")", "# We need to check to see if this container already exists so we don't try", "# to create it twice", "existing_container", "=", "list", "(", "self", ".", "get_conn", "(", ")", ".", "QueryContainers", "(", "get_database_link", "(", "self", ".", "__get_database_name", "(", "database_name", ")", ")", ",", "{", "\"query\"", ":", "\"SELECT * FROM r WHERE r.id=@id\"", ",", "\"parameters\"", ":", "[", "{", "\"name\"", ":", "\"@id\"", ",", "\"value\"", ":", "collection_name", "}", "]", "}", ")", ")", "# Only create if we did not find it already existing", "if", "len", "(", "existing_container", ")", "==", "0", ":", "self", ".", "get_conn", "(", ")", ".", "CreateContainer", "(", "get_database_link", "(", "self", ".", "__get_database_name", "(", "database_name", ")", ")", ",", "{", "\"id\"", ":", "collection_name", "}", ")"], "docstring_tokens": ["Creates", "a", "new", "collection", "in", "the", "CosmosDB", "database", "."]}
{"code_tokens": ["def", "does_database_exist", "(", "self", ",", "database_name", ")", ":", "if", "database_name", "is", "None", ":", "raise", "AirflowBadRequest", "(", "\"Database name cannot be None.\"", ")", "existing_database", "=", "list", "(", "self", ".", "get_conn", "(", ")", ".", "QueryDatabases", "(", "{", "\"query\"", ":", "\"SELECT * FROM r WHERE r.id=@id\"", ",", "\"parameters\"", ":", "[", "{", "\"name\"", ":", "\"@id\"", ",", "\"value\"", ":", "database_name", "}", "]", "}", ")", ")", "if", "len", "(", "existing_database", ")", "==", "0", ":", "return", "False", "return", "True"], "docstring_tokens": ["Checks", "if", "a", "database", "exists", "in", "CosmosDB", "."]}
{"code_tokens": ["def", "create_database", "(", "self", ",", "database_name", ")", ":", "if", "database_name", "is", "None", ":", "raise", "AirflowBadRequest", "(", "\"Database name cannot be None.\"", ")", "# We need to check to see if this database already exists so we don't try", "# to create it twice", "existing_database", "=", "list", "(", "self", ".", "get_conn", "(", ")", ".", "QueryDatabases", "(", "{", "\"query\"", ":", "\"SELECT * FROM r WHERE r.id=@id\"", ",", "\"parameters\"", ":", "[", "{", "\"name\"", ":", "\"@id\"", ",", "\"value\"", ":", "database_name", "}", "]", "}", ")", ")", "# Only create if we did not find it already existing", "if", "len", "(", "existing_database", ")", "==", "0", ":", "self", ".", "get_conn", "(", ")", ".", "CreateDatabase", "(", "{", "\"id\"", ":", "database_name", "}", ")"], "docstring_tokens": ["Creates", "a", "new", "database", "in", "CosmosDB", "."]}
{"code_tokens": ["def", "delete_database", "(", "self", ",", "database_name", ")", ":", "if", "database_name", "is", "None", ":", "raise", "AirflowBadRequest", "(", "\"Database name cannot be None.\"", ")", "self", ".", "get_conn", "(", ")", ".", "DeleteDatabase", "(", "get_database_link", "(", "database_name", ")", ")"], "docstring_tokens": ["Deletes", "an", "existing", "database", "in", "CosmosDB", "."]}
{"code_tokens": ["def", "delete_collection", "(", "self", ",", "collection_name", ",", "database_name", "=", "None", ")", ":", "if", "collection_name", "is", "None", ":", "raise", "AirflowBadRequest", "(", "\"Collection name cannot be None.\"", ")", "self", ".", "get_conn", "(", ")", ".", "DeleteContainer", "(", "get_collection_link", "(", "self", ".", "__get_database_name", "(", "database_name", ")", ",", "collection_name", ")", ")"], "docstring_tokens": ["Deletes", "an", "existing", "collection", "in", "the", "CosmosDB", "database", "."]}
{"code_tokens": ["def", "insert_documents", "(", "self", ",", "documents", ",", "database_name", "=", "None", ",", "collection_name", "=", "None", ")", ":", "if", "documents", "is", "None", ":", "raise", "AirflowBadRequest", "(", "\"You cannot insert empty documents\"", ")", "created_documents", "=", "[", "]", "for", "single_document", "in", "documents", ":", "created_documents", ".", "append", "(", "self", ".", "get_conn", "(", ")", ".", "CreateItem", "(", "get_collection_link", "(", "self", ".", "__get_database_name", "(", "database_name", ")", ",", "self", ".", "__get_collection_name", "(", "collection_name", ")", ")", ",", "single_document", ")", ")", "return", "created_documents"], "docstring_tokens": ["Insert", "a", "list", "of", "new", "documents", "into", "an", "existing", "collection", "in", "the", "CosmosDB", "database", "."]}
{"code_tokens": ["def", "delete_document", "(", "self", ",", "document_id", ",", "database_name", "=", "None", ",", "collection_name", "=", "None", ")", ":", "if", "document_id", "is", "None", ":", "raise", "AirflowBadRequest", "(", "\"Cannot delete a document without an id\"", ")", "self", ".", "get_conn", "(", ")", ".", "DeleteItem", "(", "get_document_link", "(", "self", ".", "__get_database_name", "(", "database_name", ")", ",", "self", ".", "__get_collection_name", "(", "collection_name", ")", ",", "document_id", ")", ")"], "docstring_tokens": ["Delete", "an", "existing", "document", "out", "of", "a", "collection", "in", "the", "CosmosDB", "database", "."]}
{"code_tokens": ["def", "get_document", "(", "self", ",", "document_id", ",", "database_name", "=", "None", ",", "collection_name", "=", "None", ")", ":", "if", "document_id", "is", "None", ":", "raise", "AirflowBadRequest", "(", "\"Cannot get a document without an id\"", ")", "try", ":", "return", "self", ".", "get_conn", "(", ")", ".", "ReadItem", "(", "get_document_link", "(", "self", ".", "__get_database_name", "(", "database_name", ")", ",", "self", ".", "__get_collection_name", "(", "collection_name", ")", ",", "document_id", ")", ")", "except", "HTTPFailure", ":", "return", "None"], "docstring_tokens": ["Get", "a", "document", "from", "an", "existing", "collection", "in", "the", "CosmosDB", "database", "."]}
{"code_tokens": ["def", "get_documents", "(", "self", ",", "sql_string", ",", "database_name", "=", "None", ",", "collection_name", "=", "None", ",", "partition_key", "=", "None", ")", ":", "if", "sql_string", "is", "None", ":", "raise", "AirflowBadRequest", "(", "\"SQL query string cannot be None\"", ")", "# Query them in SQL", "query", "=", "{", "'query'", ":", "sql_string", "}", "try", ":", "result_iterable", "=", "self", ".", "get_conn", "(", ")", ".", "QueryItems", "(", "get_collection_link", "(", "self", ".", "__get_database_name", "(", "database_name", ")", ",", "self", ".", "__get_collection_name", "(", "collection_name", ")", ")", ",", "query", ",", "partition_key", ")", "return", "list", "(", "result_iterable", ")", "except", "HTTPFailure", ":", "return", "None"], "docstring_tokens": ["Get", "a", "list", "of", "documents", "from", "an", "existing", "collection", "in", "the", "CosmosDB", "database", "via", "SQL", "query", "."]}
{"code_tokens": ["def", "get_function", "(", "self", ",", "name", ")", ":", "return", "self", ".", "get_conn", "(", ")", ".", "projects", "(", ")", ".", "locations", "(", ")", ".", "functions", "(", ")", ".", "get", "(", "name", "=", "name", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")"], "docstring_tokens": ["Returns", "the", "Cloud", "Function", "with", "the", "given", "name", "."]}
{"code_tokens": ["def", "create_new_function", "(", "self", ",", "location", ",", "body", ",", "project_id", "=", "None", ")", ":", "response", "=", "self", ".", "get_conn", "(", ")", ".", "projects", "(", ")", ".", "locations", "(", ")", ".", "functions", "(", ")", ".", "create", "(", "location", "=", "self", ".", "_full_location", "(", "project_id", ",", "location", ")", ",", "body", "=", "body", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")", "operation_name", "=", "response", "[", "\"name\"", "]", "self", ".", "_wait_for_operation_to_complete", "(", "operation_name", "=", "operation_name", ")"], "docstring_tokens": ["Creates", "a", "new", "function", "in", "Cloud", "Function", "in", "the", "location", "specified", "in", "the", "body", "."]}
{"code_tokens": ["def", "update_function", "(", "self", ",", "name", ",", "body", ",", "update_mask", ")", ":", "response", "=", "self", ".", "get_conn", "(", ")", ".", "projects", "(", ")", ".", "locations", "(", ")", ".", "functions", "(", ")", ".", "patch", "(", "updateMask", "=", "\",\"", ".", "join", "(", "update_mask", ")", ",", "name", "=", "name", ",", "body", "=", "body", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")", "operation_name", "=", "response", "[", "\"name\"", "]", "self", ".", "_wait_for_operation_to_complete", "(", "operation_name", "=", "operation_name", ")"], "docstring_tokens": ["Updates", "Cloud", "Functions", "according", "to", "the", "specified", "update", "mask", "."]}
{"code_tokens": ["def", "upload_function_zip", "(", "self", ",", "location", ",", "zip_path", ",", "project_id", "=", "None", ")", ":", "response", "=", "self", ".", "get_conn", "(", ")", ".", "projects", "(", ")", ".", "locations", "(", ")", ".", "functions", "(", ")", ".", "generateUploadUrl", "(", "parent", "=", "self", ".", "_full_location", "(", "project_id", ",", "location", ")", ")", ".", "execute", "(", "num_retries", "=", "self", ".", "num_retries", ")", "upload_url", "=", "response", ".", "get", "(", "'uploadUrl'", ")", "with", "open", "(", "zip_path", ",", "'rb'", ")", "as", "fp", ":", "requests", ".", "put", "(", "url", "=", "upload_url", ",", "data", "=", "fp", ",", "# Those two headers needs to be specified according to:", "# https://cloud.google.com/functions/docs/reference/rest/v1/projects.locations.functions/generateUploadUrl", "# nopep8", "headers", "=", "{", "'Content-type'", ":", "'application/zip'", ",", "'x-goog-content-length-range'", ":", "'0,104857600'", ",", "}", ")", "return", "upload_url"], "docstring_tokens": ["Uploads", "zip", "file", "with", "sources", "."]}
